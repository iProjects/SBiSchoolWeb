//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// RegisteredExams data access component. Manages CRUD operations for the RegisteredExams table.
    /// </summary>
    public partial class RegisteredExamDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the RegisteredExams table.
        /// </summary>
        /// <param name="registeredExam">A RegisteredExam object.</param>
        /// <returns>An updated RegisteredExam object.</returns>
        public RegisteredExam Create(RegisteredExam registeredExam)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.RegisteredExams ([ExamId], [ExamTypeId], [RoomId], [ExamDate], [Invilgilator], [Status], [ContributionFlag], [Contribution], [OutOf], [ModifiedBy], [LastModified], [IsDeleted]) " +
                "VALUES(@ExamId, @ExamTypeId, @RoomId, @ExamDate, @Invilgilator, @Status, @ContributionFlag, @Contribution, @OutOf, @ModifiedBy, @LastModified, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ExamId", DbType.Int32, registeredExam.ExamId);
                db.AddInParameter(cmd, "@ExamTypeId", DbType.Int32, registeredExam.ExamTypeId);
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, registeredExam.RoomId);
                db.AddInParameter(cmd, "@ExamDate", DbType.Date, registeredExam.ExamDate);
                db.AddInParameter(cmd, "@Invilgilator", DbType.String, registeredExam.Invilgilator);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, registeredExam.Status);
                db.AddInParameter(cmd, "@ContributionFlag", DbType.Boolean, registeredExam.ContributionFlag);
                db.AddInParameter(cmd, "@Contribution", DbType.Double, registeredExam.Contribution);
                db.AddInParameter(cmd, "@OutOf", DbType.Int32, registeredExam.OutOf);
                db.AddInParameter(cmd, "@ModifiedBy", DbType.String, registeredExam.ModifiedBy);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime, registeredExam.LastModified);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, registeredExam.IsDeleted);

                // Get the primary key value.
                registeredExam.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return registeredExam;
        }

        /// <summary>
        /// Updates an existing row in the RegisteredExams table.
        /// </summary>
        /// <param name="registeredExam">A RegisteredExam entity object.</param>
        public void UpdateById(RegisteredExam registeredExam)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.RegisteredExams " +
                "SET " +
                    "[ExamId]=@ExamId, " +
                    "[ExamTypeId]=@ExamTypeId, " +
                    "[RoomId]=@RoomId, " +
                    "[ExamDate]=@ExamDate, " +
                    "[Invilgilator]=@Invilgilator, " +
                    "[Status]=@Status, " +
                    "[ContributionFlag]=@ContributionFlag, " +
                    "[Contribution]=@Contribution, " +
                    "[OutOf]=@OutOf, " +
                    "[ModifiedBy]=@ModifiedBy, " +
                    "[LastModified]=@LastModified, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ExamId", DbType.Int32, registeredExam.ExamId);
                db.AddInParameter(cmd, "@ExamTypeId", DbType.Int32, registeredExam.ExamTypeId);
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, registeredExam.RoomId);
                db.AddInParameter(cmd, "@ExamDate", DbType.Date, registeredExam.ExamDate);
                db.AddInParameter(cmd, "@Invilgilator", DbType.String, registeredExam.Invilgilator);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, registeredExam.Status);
                db.AddInParameter(cmd, "@ContributionFlag", DbType.Boolean, registeredExam.ContributionFlag);
                db.AddInParameter(cmd, "@Contribution", DbType.Double, registeredExam.Contribution);
                db.AddInParameter(cmd, "@OutOf", DbType.Int32, registeredExam.OutOf);
                db.AddInParameter(cmd, "@ModifiedBy", DbType.String, registeredExam.ModifiedBy);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime, registeredExam.LastModified);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, registeredExam.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, registeredExam.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the RegisteredExams table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.RegisteredExams " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the RegisteredExams table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A RegisteredExam object with data populated from the database.</returns>
        public RegisteredExam SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ExamId], [ExamTypeId], [RoomId], [ExamDate], [Invilgilator], [Status], [ContributionFlag]" +
                        ", [Contribution], [OutOf], [ModifiedBy], [LastModified], [IsDeleted] " +
                "FROM dbo.RegisteredExams  " +
                "WHERE [Id]=@Id ";

            RegisteredExam registeredExam = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new RegisteredExam
                        registeredExam = new RegisteredExam();

                        // Read values.
                        registeredExam.Id = base.GetDataValue<int>(dr, "Id");
                        registeredExam.ExamId = base.GetDataValue<int>(dr, "ExamId");
                        registeredExam.ExamTypeId = base.GetDataValue<int>(dr, "ExamTypeId");
                        registeredExam.RoomId = base.GetDataValue<int>(dr, "RoomId");
                        registeredExam.ExamDate = base.GetDataValue<DateTime>(dr, "ExamDate");
                        registeredExam.Invilgilator = base.GetDataValue<string>(dr, "Invilgilator");
                        registeredExam.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        registeredExam.ContributionFlag = base.GetDataValue<bool>(dr, "ContributionFlag");
                        registeredExam.Contribution = base.GetDataValue<double>(dr, "Contribution");
                        registeredExam.OutOf = base.GetDataValue<int>(dr, "OutOf");
                        registeredExam.ModifiedBy = base.GetDataValue<string>(dr, "ModifiedBy");
                        registeredExam.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                        registeredExam.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return registeredExam;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the RegisteredExams table.
        /// </summary>
        /// <returns>A collection of RegisteredExam objects.</returns>		
        public List<RegisteredExam> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ExamId], [ExamTypeId], [RoomId], [ExamDate], [Invilgilator], [Status], [ContributionFlag]" +
                        ", [Contribution], [OutOf], [ModifiedBy], [LastModified], [IsDeleted] " +
                "FROM dbo.RegisteredExams ";

            List<RegisteredExam> result = new List<RegisteredExam>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new RegisteredExam
                        RegisteredExam registeredExam = new RegisteredExam();

                        // Read values.
                        registeredExam.Id = base.GetDataValue<int>(dr, "Id");
                        registeredExam.ExamId = base.GetDataValue<int>(dr, "ExamId");
                        registeredExam.ExamTypeId = base.GetDataValue<int>(dr, "ExamTypeId");
                        registeredExam.RoomId = base.GetDataValue<int>(dr, "RoomId");
                        registeredExam.ExamDate = base.GetDataValue<DateTime>(dr, "ExamDate");
                        registeredExam.Invilgilator = base.GetDataValue<string>(dr, "Invilgilator");
                        registeredExam.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        registeredExam.ContributionFlag = base.GetDataValue<bool>(dr, "ContributionFlag");
                        registeredExam.Contribution = base.GetDataValue<double>(dr, "Contribution");
                        registeredExam.OutOf = base.GetDataValue<int>(dr, "OutOf");
                        registeredExam.ModifiedBy = base.GetDataValue<string>(dr, "ModifiedBy");
                        registeredExam.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                        registeredExam.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(registeredExam);
                    }
                }
            }

            return result;
        }
    }
}

