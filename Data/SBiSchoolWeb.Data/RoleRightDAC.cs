//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// RoleRights data access component. Manages CRUD operations for the RoleRights table.
    /// </summary>
    public partial class RoleRightDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the RoleRights table.
        /// </summary>
        /// <param name="roleRight">A RoleRight object.</param>
        /// <returns>An updated RoleRight object.</returns>
        public RoleRight Create(RoleRight roleRight)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.RoleRights ([RoleId], [Object], [ObjectType], [ObjectRight], [IsDeleted]) " +
                "VALUES(@RoleId, @Object, @ObjectType, @ObjectRight, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@RoleId", DbType.AnsiStringFixedLength, roleRight.RoleId);
                db.AddInParameter(cmd, "@Object", DbType.AnsiString, roleRight.Object);
                db.AddInParameter(cmd, "@ObjectType", DbType.AnsiString, roleRight.ObjectType);
                db.AddInParameter(cmd, "@ObjectRight", DbType.AnsiStringFixedLength, roleRight.ObjectRight);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, roleRight.IsDeleted);

                // Get the primary key value.
                roleRight.RoleRightId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return roleRight;
        }

        /// <summary>
        /// Updates an existing row in the RoleRights table.
        /// </summary>
        /// <param name="roleRight">A RoleRight entity object.</param>
        public void UpdateById(RoleRight roleRight)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.RoleRights " +
                "SET " +
                    "[RoleId]=@RoleId, " +
                    "[Object]=@Object, " +
                    "[ObjectType]=@ObjectType, " +
                    "[ObjectRight]=@ObjectRight, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [RoleRightId]=@RoleRightId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@RoleId", DbType.AnsiStringFixedLength, roleRight.RoleId);
                db.AddInParameter(cmd, "@Object", DbType.AnsiString, roleRight.Object);
                db.AddInParameter(cmd, "@ObjectType", DbType.AnsiString, roleRight.ObjectType);
                db.AddInParameter(cmd, "@ObjectRight", DbType.AnsiStringFixedLength, roleRight.ObjectRight);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, roleRight.IsDeleted);
                db.AddInParameter(cmd, "@RoleRightId", DbType.Int32, roleRight.RoleRightId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the RoleRights table.
        /// </summary>
        /// <param name="roleRightId">A roleRightId value.</param>
        public void DeleteById(int roleRightId)
        {
            const string SQL_STATEMENT = "DELETE dbo.RoleRights " +
                                         "WHERE [RoleRightId]=@RoleRightId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@RoleRightId", DbType.Int32, roleRightId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the RoleRights table.
        /// </summary>
        /// <param name="roleRightId">A RoleRightId value.</param>
        /// <returns>A RoleRight object with data populated from the database.</returns>
        public RoleRight SelectById(int roleRightId)
        {
            const string SQL_STATEMENT =
                "SELECT [RoleRightId], [RoleId], [Object], [ObjectType], [ObjectRight], [IsDeleted] " +
                "FROM dbo.RoleRights  " +
                "WHERE [RoleRightId]=@RoleRightId ";

            RoleRight roleRight = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@RoleRightId", DbType.Int32, roleRightId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new RoleRight
                        roleRight = new RoleRight();

                        // Read values.
                        roleRight.RoleRightId = base.GetDataValue<int>(dr, "RoleRightId");
                        roleRight.RoleId = base.GetDataValue<string>(dr, "RoleId");
                        roleRight.Object = base.GetDataValue<string>(dr, "Object");
                        roleRight.ObjectType = base.GetDataValue<string>(dr, "ObjectType");
                        roleRight.ObjectRight = base.GetDataValue<string>(dr, "ObjectRight");
                        roleRight.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return roleRight;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the RoleRights table.
        /// </summary>
        /// <returns>A collection of RoleRight objects.</returns>		
        public List<RoleRight> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [RoleRightId], [RoleId], [Object], [ObjectType], [ObjectRight], [IsDeleted] " +
                "FROM dbo.RoleRights ";

            List<RoleRight> result = new List<RoleRight>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new RoleRight
                        RoleRight roleRight = new RoleRight();

                        // Read values.
                        roleRight.RoleRightId = base.GetDataValue<int>(dr, "RoleRightId");
                        roleRight.RoleId = base.GetDataValue<string>(dr, "RoleId");
                        roleRight.Object = base.GetDataValue<string>(dr, "Object");
                        roleRight.ObjectType = base.GetDataValue<string>(dr, "ObjectType");
                        roleRight.ObjectRight = base.GetDataValue<string>(dr, "ObjectRight");
                        roleRight.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(roleRight);
                    }
                }
            }

            return result;
        }
    }
}

