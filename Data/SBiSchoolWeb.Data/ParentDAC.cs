//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Parents data access component. Manages CRUD operations for the Parents table.
    /// </summary>
    public partial class ParentDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Parents table.
        /// </summary>
        /// <param name="parent">A Parent object.</param>
        /// <returns>An updated Parent object.</returns>
        public Parent Create(Parent parent)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Parents ([Name], [Gender], [CellPhoneNo], [Email], [Occupation], [Maritalstatus], [Relationship], [IsDeleted]) " +
                "VALUES(@Name, @Gender, @CellPhoneNo, @Email, @Occupation, @Maritalstatus, @Relationship, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, parent.Name);
                db.AddInParameter(cmd, "@Gender", DbType.StringFixedLength, parent.Gender);
                db.AddInParameter(cmd, "@CellPhoneNo", DbType.String, parent.CellPhoneNo);
                db.AddInParameter(cmd, "@Email", DbType.String, parent.Email);
                db.AddInParameter(cmd, "@Occupation", DbType.String, parent.Occupation);
                db.AddInParameter(cmd, "@Maritalstatus", DbType.StringFixedLength, parent.Maritalstatus);
                db.AddInParameter(cmd, "@Relationship", DbType.String, parent.Relationship);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, parent.IsDeleted);

                // Get the primary key value.
                parent.ParentId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return parent;
        }

        /// <summary>
        /// Updates an existing row in the Parents table.
        /// </summary>
        /// <param name="parent">A Parent entity object.</param>
        public void UpdateById(Parent parent)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Parents " +
                "SET " +
                    "[Name]=@Name, " +
                    "[Gender]=@Gender, " +
                    "[CellPhoneNo]=@CellPhoneNo, " +
                    "[Email]=@Email, " +
                    "[Occupation]=@Occupation, " +
                    "[Maritalstatus]=@Maritalstatus, " +
                    "[Relationship]=@Relationship, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [ParentId]=@ParentId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, parent.Name);
                db.AddInParameter(cmd, "@Gender", DbType.StringFixedLength, parent.Gender);
                db.AddInParameter(cmd, "@CellPhoneNo", DbType.String, parent.CellPhoneNo);
                db.AddInParameter(cmd, "@Email", DbType.String, parent.Email);
                db.AddInParameter(cmd, "@Occupation", DbType.String, parent.Occupation);
                db.AddInParameter(cmd, "@Maritalstatus", DbType.StringFixedLength, parent.Maritalstatus);
                db.AddInParameter(cmd, "@Relationship", DbType.String, parent.Relationship);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, parent.IsDeleted);
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, parent.ParentId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Parents table.
        /// </summary>
        /// <param name="parentId">A parentId value.</param>
        public void DeleteById(int parentId)
        {
            const string SQL_STATEMENT = "DELETE dbo.Parents " +
                                         "WHERE [ParentId]=@ParentId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, parentId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Parents table.
        /// </summary>
        /// <param name="parentId">A ParentId value.</param>
        /// <returns>A Parent object with data populated from the database.</returns>
        public Parent SelectById(int parentId)
        {
            const string SQL_STATEMENT =
                "SELECT [ParentId], [Name], [Gender], [CellPhoneNo], [Email], [Occupation], [Maritalstatus]" +
                        ", [Relationship], [IsDeleted] " +
                "FROM dbo.Parents  " +
                "WHERE [ParentId]=@ParentId ";

            Parent parent = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, parentId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Parent
                        parent = new Parent();

                        // Read values.
                        parent.ParentId = base.GetDataValue<int>(dr, "ParentId");
                        parent.Name = base.GetDataValue<string>(dr, "Name");
                        parent.Gender = Convert.ToChar(base.GetDataValue<string>(dr, "Gender"));
                        parent.CellPhoneNo = base.GetDataValue<string>(dr, "CellPhoneNo");
                        parent.Email = base.GetDataValue<string>(dr, "Email");
                        parent.Occupation = base.GetDataValue<string>(dr, "Occupation");
                        parent.Maritalstatus = Convert.ToChar(base.GetDataValue<string>(dr, "Maritalstatus"));
                        parent.Relationship = base.GetDataValue<string>(dr, "Relationship");
                        parent.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return parent;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Parents table.
        /// </summary>
        /// <returns>A collection of Parent objects.</returns>		
        public List<Parent> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [ParentId], [Name], [Gender], [CellPhoneNo], [Email], [Occupation], [Maritalstatus]" +
                        ", [Relationship], [IsDeleted] " +
                "FROM dbo.Parents ";

            List<Parent> result = new List<Parent>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Parent
                        Parent parent = new Parent();

                        // Read values.
                        parent.ParentId = base.GetDataValue<int>(dr, "ParentId");
                        parent.Name = base.GetDataValue<string>(dr, "Name");
                        parent.Gender = Convert.ToChar(base.GetDataValue<string>(dr, "Gender"));
                        parent.CellPhoneNo = base.GetDataValue<string>(dr, "CellPhoneNo");
                        parent.Email = base.GetDataValue<string>(dr, "Email");
                        parent.Occupation = base.GetDataValue<string>(dr, "Occupation");
                        parent.Maritalstatus = Convert.ToChar(base.GetDataValue<string>(dr, "Maritalstatus"));
                        parent.Relationship = base.GetDataValue<string>(dr, "Relationship");
                        parent.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(parent);
                    }
                }
            }

            return result;
        }
    }
}

