//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// FeeStructureAcademic data access component. Manages CRUD operations for the FeeStructureAcademic table.
    /// </summary>
    public partial class FeeStructureAcademicDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the FeeStructureAcademic table.
        /// </summary>
        /// <param name="feeStructureAcademic">A FeeStructureAcademic object.</param>
        /// <returns>An updated FeeStructureAcademic object.</returns>
        public FeeStructureAcademic Create(FeeStructureAcademic feeStructureAcademic)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.FeeStructureAcademic ([FeeStructureId], [SchoolClassId], [Term], [AccountId], [Description], [Amount], [AmountPeriod], [IsDeleted]) " +
                "VALUES(@FeeStructureId, @SchoolClassId, @Term, @AccountId, @Description, @Amount, @AmountPeriod, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@FeeStructureId", DbType.Int32, feeStructureAcademic.FeeStructureId);
                db.AddInParameter(cmd, "@SchoolClassId", DbType.Int32, feeStructureAcademic.SchoolClassId);
                db.AddInParameter(cmd, "@Term", DbType.Int32, feeStructureAcademic.Term);
                db.AddInParameter(cmd, "@AccountId", DbType.Int32, feeStructureAcademic.AccountId);
                db.AddInParameter(cmd, "@Description", DbType.String, feeStructureAcademic.Description);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, feeStructureAcademic.Amount);
                db.AddInParameter(cmd, "@AmountPeriod", DbType.StringFixedLength, feeStructureAcademic.AmountPeriod);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, feeStructureAcademic.IsDeleted);

                // Get the primary key value.
                feeStructureAcademic.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return feeStructureAcademic;
        }

        /// <summary>
        /// Updates an existing row in the FeeStructureAcademic table.
        /// </summary>
        /// <param name="feeStructureAcademic">A FeeStructureAcademic entity object.</param>
        public void UpdateById(FeeStructureAcademic feeStructureAcademic)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.FeeStructureAcademic " +
                "SET " +
                    "[FeeStructureId]=@FeeStructureId, " +
                    "[SchoolClassId]=@SchoolClassId, " +
                    "[Term]=@Term, " +
                    "[AccountId]=@AccountId, " +
                    "[Description]=@Description, " +
                    "[Amount]=@Amount, " +
                    "[AmountPeriod]=@AmountPeriod, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@FeeStructureId", DbType.Int32, feeStructureAcademic.FeeStructureId);
                db.AddInParameter(cmd, "@SchoolClassId", DbType.Int32, feeStructureAcademic.SchoolClassId);
                db.AddInParameter(cmd, "@Term", DbType.Int32, feeStructureAcademic.Term);
                db.AddInParameter(cmd, "@AccountId", DbType.Int32, feeStructureAcademic.AccountId);
                db.AddInParameter(cmd, "@Description", DbType.String, feeStructureAcademic.Description);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, feeStructureAcademic.Amount);
                db.AddInParameter(cmd, "@AmountPeriod", DbType.StringFixedLength, feeStructureAcademic.AmountPeriod);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, feeStructureAcademic.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, feeStructureAcademic.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the FeeStructureAcademic table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.FeeStructureAcademic " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the FeeStructureAcademic table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A FeeStructureAcademic object with data populated from the database.</returns>
        public FeeStructureAcademic SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [FeeStructureId], [SchoolClassId], [Term], [AccountId], [Description], [Amount]" +
                        ", [AmountPeriod], [IsDeleted] " +
                "FROM dbo.FeeStructureAcademic  " +
                "WHERE [Id]=@Id ";

            FeeStructureAcademic feeStructureAcademic = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new FeeStructureAcademic
                        feeStructureAcademic = new FeeStructureAcademic();

                        // Read values.
                        feeStructureAcademic.Id = base.GetDataValue<int>(dr, "Id");
                        feeStructureAcademic.FeeStructureId = base.GetDataValue<int>(dr, "FeeStructureId");
                        feeStructureAcademic.SchoolClassId = base.GetDataValue<int>(dr, "SchoolClassId");
                        feeStructureAcademic.Term = base.GetDataValue<int>(dr, "Term");
                        feeStructureAcademic.AccountId = base.GetDataValue<int>(dr, "AccountId");
                        feeStructureAcademic.Description = base.GetDataValue<string>(dr, "Description");
                        feeStructureAcademic.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        feeStructureAcademic.AmountPeriod = Convert.ToChar(base.GetDataValue<string>(dr, "AmountPeriod"));
                        feeStructureAcademic.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return feeStructureAcademic;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the FeeStructureAcademic table.
        /// </summary>
        /// <returns>A collection of FeeStructureAcademic objects.</returns>		
        public List<FeeStructureAcademic> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [FeeStructureId], [SchoolClassId], [Term], [AccountId], [Description], [Amount]" +
                        ", [AmountPeriod], [IsDeleted] " +
                "FROM dbo.FeeStructureAcademic ";

            List<FeeStructureAcademic> result = new List<FeeStructureAcademic>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new FeeStructureAcademic
                        FeeStructureAcademic feeStructureAcademic = new FeeStructureAcademic();

                        // Read values.
                        feeStructureAcademic.Id = base.GetDataValue<int>(dr, "Id");
                        feeStructureAcademic.FeeStructureId = base.GetDataValue<int>(dr, "FeeStructureId");
                        feeStructureAcademic.SchoolClassId = base.GetDataValue<int>(dr, "SchoolClassId");
                        feeStructureAcademic.Term = base.GetDataValue<int>(dr, "Term");
                        feeStructureAcademic.AccountId = base.GetDataValue<int>(dr, "AccountId");
                        feeStructureAcademic.Description = base.GetDataValue<string>(dr, "Description");
                        feeStructureAcademic.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        feeStructureAcademic.AmountPeriod = Convert.ToChar(base.GetDataValue<string>(dr, "AmountPeriod"));
                        feeStructureAcademic.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(feeStructureAcademic);
                    }
                }
            }

            return result;
        }
    }
}

