//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Residences data access component. Manages CRUD operations for the Residences table.
    /// </summary>
    public partial class ResidenceDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Residences table.
        /// </summary>
        /// <param name="residence">A Residence object.</param>
        /// <returns>An updated Residence object.</returns>
        public Residence Create(Residence residence)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Residences ([ParentId], [Name], [Cost], [GPSCordinates], [Title], [IsDeleted]) " +
                "VALUES(@ParentId, @Name, @Cost, @GPSCordinates, @Title, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, residence.ParentId);
                db.AddInParameter(cmd, "@Name", DbType.AnsiString, residence.Name);
                db.AddInParameter(cmd, "@Cost", DbType.Currency, residence.Cost);
                db.AddInParameter(cmd, "@GPSCordinates", DbType.AnsiString, residence.GPSCordinates);
                db.AddInParameter(cmd, "@Title", DbType.AnsiString, residence.Title);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, residence.IsDeleted);

                // Get the primary key value.
                residence.ResidenceId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return residence;
        }

        /// <summary>
        /// Updates an existing row in the Residences table.
        /// </summary>
        /// <param name="residence">A Residence entity object.</param>
        public void UpdateById(Residence residence)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Residences " +
                "SET " +
                    "[ParentId]=@ParentId, " +
                    "[Name]=@Name, " +
                    "[Cost]=@Cost, " +
                    "[GPSCordinates]=@GPSCordinates, " +
                    "[Title]=@Title, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [ResidenceId]=@ResidenceId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, residence.ParentId);
                db.AddInParameter(cmd, "@Name", DbType.AnsiString, residence.Name);
                db.AddInParameter(cmd, "@Cost", DbType.Currency, residence.Cost);
                db.AddInParameter(cmd, "@GPSCordinates", DbType.AnsiString, residence.GPSCordinates);
                db.AddInParameter(cmd, "@Title", DbType.AnsiString, residence.Title);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, residence.IsDeleted);
                db.AddInParameter(cmd, "@ResidenceId", DbType.Int32, residence.ResidenceId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Residences table.
        /// </summary>
        /// <param name="residenceId">A residenceId value.</param>
        public void DeleteById(int residenceId)
        {
            const string SQL_STATEMENT = "DELETE dbo.Residences " +
                                         "WHERE [ResidenceId]=@ResidenceId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ResidenceId", DbType.Int32, residenceId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Residences table.
        /// </summary>
        /// <param name="residenceId">A ResidenceId value.</param>
        /// <returns>A Residence object with data populated from the database.</returns>
        public Residence SelectById(int residenceId)
        {
            const string SQL_STATEMENT =
                "SELECT [ResidenceId], [ParentId], [Name], [Cost], [GPSCordinates], [Title], [IsDeleted]" +
                        " " +
                "FROM dbo.Residences  " +
                "WHERE [ResidenceId]=@ResidenceId ";

            Residence residence = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@ResidenceId", DbType.Int32, residenceId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Residence
                        residence = new Residence();

                        // Read values.
                        residence.ResidenceId = base.GetDataValue<int>(dr, "ResidenceId");
                        residence.ParentId = base.GetDataValue<int>(dr, "ParentId");
                        residence.Name = base.GetDataValue<string>(dr, "Name");
                        residence.Cost = base.GetDataValue<decimal>(dr, "Cost");
                        residence.GPSCordinates = base.GetDataValue<string>(dr, "GPSCordinates");
                        residence.Title = base.GetDataValue<string>(dr, "Title");
                        residence.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return residence;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Residences table.
        /// </summary>
        /// <returns>A collection of Residence objects.</returns>		
        public List<Residence> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [ResidenceId], [ParentId], [Name], [Cost], [GPSCordinates], [Title], [IsDeleted]" +
                        " " +
                "FROM dbo.Residences ";

            List<Residence> result = new List<Residence>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Residence
                        Residence residence = new Residence();

                        // Read values.
                        residence.ResidenceId = base.GetDataValue<int>(dr, "ResidenceId");
                        residence.ParentId = base.GetDataValue<int>(dr, "ParentId");
                        residence.Name = base.GetDataValue<string>(dr, "Name");
                        residence.Cost = base.GetDataValue<decimal>(dr, "Cost");
                        residence.GPSCordinates = base.GetDataValue<string>(dr, "GPSCordinates");
                        residence.Title = base.GetDataValue<string>(dr, "Title");
                        residence.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(residence);
                    }
                }
            }

            return result;
        }
    }
}

