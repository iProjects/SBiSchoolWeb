//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// StudentProgresses_Temp data access component. Manages CRUD operations for the StudentProgresses_Temp table.
    /// </summary>
    public partial class StudentProgresses_TempDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the StudentProgresses_Temp table.
        /// </summary>
        /// <param name="studentProgresses_Temp">A StudentProgresses_Temp object.</param>
        /// <returns>An updated StudentProgresses_Temp object.</returns>
        public StudentProgresses_Temp Create(StudentProgresses_Temp studentProgresses_Temp)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.StudentProgresses_Temp ([StudentId], [ExamId], [SchoolClassId], [Year], [Term], [ClassShortCode], [SubjectShortCode], [TeacherId], [TotalMarks], [TotalPoints], [Position], [MeanMarks], [MeanGrade], [ClassTeacherRemark], [HeadTeacherRemark], [IsDeleted]) " +
                "VALUES(@StudentId, @ExamId, @SchoolClassId, @Year, @Term, @ClassShortCode, @SubjectShortCode, @TeacherId, @TotalMarks, @TotalPoints, @Position, @MeanMarks, @MeanGrade, @ClassTeacherRemark, @HeadTeacherRemark, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@StudentId", DbType.Int32, studentProgresses_Temp.StudentId);
                db.AddInParameter(cmd, "@ExamId", DbType.Int32, studentProgresses_Temp.ExamId);
                db.AddInParameter(cmd, "@SchoolClassId", DbType.Int32, studentProgresses_Temp.SchoolClassId);
                db.AddInParameter(cmd, "@Year", DbType.Int32, studentProgresses_Temp.Year);
                db.AddInParameter(cmd, "@Term", DbType.Int32, studentProgresses_Temp.Term);
                db.AddInParameter(cmd, "@ClassShortCode", DbType.String, studentProgresses_Temp.ClassShortCode);
                db.AddInParameter(cmd, "@SubjectShortCode", DbType.StringFixedLength, studentProgresses_Temp.SubjectShortCode);
                db.AddInParameter(cmd, "@TeacherId", DbType.Int32, studentProgresses_Temp.TeacherId);
                db.AddInParameter(cmd, "@TotalMarks", DbType.Double, studentProgresses_Temp.TotalMarks);
                db.AddInParameter(cmd, "@TotalPoints", DbType.Double, studentProgresses_Temp.TotalPoints);
                db.AddInParameter(cmd, "@Position", DbType.Int32, studentProgresses_Temp.Position);
                db.AddInParameter(cmd, "@MeanMarks", DbType.Double, studentProgresses_Temp.MeanMarks);
                db.AddInParameter(cmd, "@MeanGrade", DbType.String, studentProgresses_Temp.MeanGrade);
                db.AddInParameter(cmd, "@ClassTeacherRemark", DbType.String, studentProgresses_Temp.ClassTeacherRemark);
                db.AddInParameter(cmd, "@HeadTeacherRemark", DbType.String, studentProgresses_Temp.HeadTeacherRemark);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, studentProgresses_Temp.IsDeleted);

                // Get the primary key value.
                studentProgresses_Temp.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return studentProgresses_Temp;
        }

        /// <summary>
        /// Updates an existing row in the StudentProgresses_Temp table.
        /// </summary>
        /// <param name="studentProgresses_Temp">A StudentProgresses_Temp entity object.</param>
        public void UpdateById(StudentProgresses_Temp studentProgresses_Temp)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.StudentProgresses_Temp " +
                "SET " +
                    "[StudentId]=@StudentId, " +
                    "[ExamId]=@ExamId, " +
                    "[SchoolClassId]=@SchoolClassId, " +
                    "[Year]=@Year, " +
                    "[Term]=@Term, " +
                    "[ClassShortCode]=@ClassShortCode, " +
                    "[SubjectShortCode]=@SubjectShortCode, " +
                    "[TeacherId]=@TeacherId, " +
                    "[TotalMarks]=@TotalMarks, " +
                    "[TotalPoints]=@TotalPoints, " +
                    "[Position]=@Position, " +
                    "[MeanMarks]=@MeanMarks, " +
                    "[MeanGrade]=@MeanGrade, " +
                    "[ClassTeacherRemark]=@ClassTeacherRemark, " +
                    "[HeadTeacherRemark]=@HeadTeacherRemark, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@StudentId", DbType.Int32, studentProgresses_Temp.StudentId);
                db.AddInParameter(cmd, "@ExamId", DbType.Int32, studentProgresses_Temp.ExamId);
                db.AddInParameter(cmd, "@SchoolClassId", DbType.Int32, studentProgresses_Temp.SchoolClassId);
                db.AddInParameter(cmd, "@Year", DbType.Int32, studentProgresses_Temp.Year);
                db.AddInParameter(cmd, "@Term", DbType.Int32, studentProgresses_Temp.Term);
                db.AddInParameter(cmd, "@ClassShortCode", DbType.String, studentProgresses_Temp.ClassShortCode);
                db.AddInParameter(cmd, "@SubjectShortCode", DbType.StringFixedLength, studentProgresses_Temp.SubjectShortCode);
                db.AddInParameter(cmd, "@TeacherId", DbType.Int32, studentProgresses_Temp.TeacherId);
                db.AddInParameter(cmd, "@TotalMarks", DbType.Double, studentProgresses_Temp.TotalMarks);
                db.AddInParameter(cmd, "@TotalPoints", DbType.Double, studentProgresses_Temp.TotalPoints);
                db.AddInParameter(cmd, "@Position", DbType.Int32, studentProgresses_Temp.Position);
                db.AddInParameter(cmd, "@MeanMarks", DbType.Double, studentProgresses_Temp.MeanMarks);
                db.AddInParameter(cmd, "@MeanGrade", DbType.String, studentProgresses_Temp.MeanGrade);
                db.AddInParameter(cmd, "@ClassTeacherRemark", DbType.String, studentProgresses_Temp.ClassTeacherRemark);
                db.AddInParameter(cmd, "@HeadTeacherRemark", DbType.String, studentProgresses_Temp.HeadTeacherRemark);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, studentProgresses_Temp.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, studentProgresses_Temp.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the StudentProgresses_Temp table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.StudentProgresses_Temp " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the StudentProgresses_Temp table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A StudentProgresses_Temp object with data populated from the database.</returns>
        public StudentProgresses_Temp SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [StudentId], [ExamId], [SchoolClassId], [Year], [Term], [ClassShortCode], [SubjectShortCode]" +
                        ", [TeacherId], [TotalMarks], [TotalPoints], [Position], [MeanMarks], [MeanGrade], [ClassTeacherRemark]" +
                        ", [HeadTeacherRemark], [IsDeleted] " +
                "FROM dbo.StudentProgresses_Temp  " +
                "WHERE [Id]=@Id ";

            StudentProgresses_Temp studentProgresses_Temp = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new StudentProgresses_Temp
                        studentProgresses_Temp = new StudentProgresses_Temp();

                        // Read values.
                        studentProgresses_Temp.Id = base.GetDataValue<int>(dr, "Id");
                        studentProgresses_Temp.StudentId = base.GetDataValue<int>(dr, "StudentId");
                        studentProgresses_Temp.ExamId = base.GetDataValue<int>(dr, "ExamId");
                        studentProgresses_Temp.SchoolClassId = base.GetDataValue<int>(dr, "SchoolClassId");
                        studentProgresses_Temp.Year = base.GetDataValue<int>(dr, "Year");
                        studentProgresses_Temp.Term = base.GetDataValue<int>(dr, "Term");
                        studentProgresses_Temp.ClassShortCode = base.GetDataValue<string>(dr, "ClassShortCode");
                        studentProgresses_Temp.SubjectShortCode = base.GetDataValue<string>(dr, "SubjectShortCode");
                        studentProgresses_Temp.TeacherId = base.GetDataValue<int>(dr, "TeacherId");
                        studentProgresses_Temp.TotalMarks = base.GetDataValue<double>(dr, "TotalMarks");
                        studentProgresses_Temp.TotalPoints = base.GetDataValue<double>(dr, "TotalPoints");
                        studentProgresses_Temp.Position = base.GetDataValue<int>(dr, "Position");
                        studentProgresses_Temp.MeanMarks = base.GetDataValue<double>(dr, "MeanMarks");
                        studentProgresses_Temp.MeanGrade = base.GetDataValue<string>(dr, "MeanGrade");
                        studentProgresses_Temp.ClassTeacherRemark = base.GetDataValue<string>(dr, "ClassTeacherRemark");
                        studentProgresses_Temp.HeadTeacherRemark = base.GetDataValue<string>(dr, "HeadTeacherRemark");
                        studentProgresses_Temp.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return studentProgresses_Temp;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the StudentProgresses_Temp table.
        /// </summary>
        /// <returns>A collection of StudentProgresses_Temp objects.</returns>		
        public List<StudentProgresses_Temp> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [StudentId], [ExamId], [SchoolClassId], [Year], [Term], [ClassShortCode], [SubjectShortCode]" +
                        ", [TeacherId], [TotalMarks], [TotalPoints], [Position], [MeanMarks], [MeanGrade], [ClassTeacherRemark]" +
                        ", [HeadTeacherRemark], [IsDeleted] " +
                "FROM dbo.StudentProgresses_Temp ";

            List<StudentProgresses_Temp> result = new List<StudentProgresses_Temp>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new StudentProgresses_Temp
                        StudentProgresses_Temp studentProgresses_Temp = new StudentProgresses_Temp();

                        // Read values.
                        studentProgresses_Temp.Id = base.GetDataValue<int>(dr, "Id");
                        studentProgresses_Temp.StudentId = base.GetDataValue<int>(dr, "StudentId");
                        studentProgresses_Temp.ExamId = base.GetDataValue<int>(dr, "ExamId");
                        studentProgresses_Temp.SchoolClassId = base.GetDataValue<int>(dr, "SchoolClassId");
                        studentProgresses_Temp.Year = base.GetDataValue<int>(dr, "Year");
                        studentProgresses_Temp.Term = base.GetDataValue<int>(dr, "Term");
                        studentProgresses_Temp.ClassShortCode = base.GetDataValue<string>(dr, "ClassShortCode");
                        studentProgresses_Temp.SubjectShortCode = base.GetDataValue<string>(dr, "SubjectShortCode");
                        studentProgresses_Temp.TeacherId = base.GetDataValue<int>(dr, "TeacherId");
                        studentProgresses_Temp.TotalMarks = base.GetDataValue<double>(dr, "TotalMarks");
                        studentProgresses_Temp.TotalPoints = base.GetDataValue<double>(dr, "TotalPoints");
                        studentProgresses_Temp.Position = base.GetDataValue<int>(dr, "Position");
                        studentProgresses_Temp.MeanMarks = base.GetDataValue<double>(dr, "MeanMarks");
                        studentProgresses_Temp.MeanGrade = base.GetDataValue<string>(dr, "MeanGrade");
                        studentProgresses_Temp.ClassTeacherRemark = base.GetDataValue<string>(dr, "ClassTeacherRemark");
                        studentProgresses_Temp.HeadTeacherRemark = base.GetDataValue<string>(dr, "HeadTeacherRemark");
                        studentProgresses_Temp.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(studentProgresses_Temp);
                    }
                }
            }

            return result;
        }
    }
}

