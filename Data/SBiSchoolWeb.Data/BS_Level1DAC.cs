//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// BS_Level1 data access component. Manages CRUD operations for the BS_Level1 table.
    /// </summary>
    public partial class BS_Level1DAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the BS_Level1 table.
        /// </summary>
        /// <param name="bS_Level1">A BS_Level1 object.</param>
        /// <returns>An updated BS_Level1 object.</returns>
        public BS_Level1 Create(BS_Level1 bS_Level1)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.BS_Level1 ([Description], [BSGroup], [ROrder], [IsDeleted]) " +
                "VALUES(@Description, @BSGroup, @ROrder, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, bS_Level1.Description);
                db.AddInParameter(cmd, "@BSGroup", DbType.StringFixedLength, bS_Level1.BSGroup);
                db.AddInParameter(cmd, "@ROrder", DbType.Int32, bS_Level1.ROrder);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, bS_Level1.IsDeleted);

                // Get the primary key value.
                bS_Level1.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return bS_Level1;
        }

        /// <summary>
        /// Updates an existing row in the BS_Level1 table.
        /// </summary>
        /// <param name="bS_Level1">A BS_Level1 entity object.</param>
        public void UpdateById(BS_Level1 bS_Level1)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.BS_Level1 " +
                "SET " +
                    "[Description]=@Description, " +
                    "[BSGroup]=@BSGroup, " +
                    "[ROrder]=@ROrder, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, bS_Level1.Description);
                db.AddInParameter(cmd, "@BSGroup", DbType.StringFixedLength, bS_Level1.BSGroup);
                db.AddInParameter(cmd, "@ROrder", DbType.Int32, bS_Level1.ROrder);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, bS_Level1.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, bS_Level1.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the BS_Level1 table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.BS_Level1 " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the BS_Level1 table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A BS_Level1 object with data populated from the database.</returns>
        public BS_Level1 SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [BSGroup], [ROrder], [IsDeleted] " +
                "FROM dbo.BS_Level1  " +
                "WHERE [Id]=@Id ";

            BS_Level1 bS_Level1 = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new BS_Level1
                        bS_Level1 = new BS_Level1();

                        // Read values.
                        bS_Level1.Id = base.GetDataValue<int>(dr, "Id");
                        bS_Level1.Description = base.GetDataValue<string>(dr, "Description");
                        bS_Level1.BSGroup = base.GetDataValue<string>(dr, "BSGroup");
                        bS_Level1.ROrder = base.GetDataValue<int>(dr, "ROrder");
                        bS_Level1.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return bS_Level1;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the BS_Level1 table.
        /// </summary>
        /// <returns>A collection of BS_Level1 objects.</returns>		
        public List<BS_Level1> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [BSGroup], [ROrder], [IsDeleted] " +
                "FROM dbo.BS_Level1 ";

            List<BS_Level1> result = new List<BS_Level1>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new BS_Level1
                        BS_Level1 bS_Level1 = new BS_Level1();

                        // Read values.
                        bS_Level1.Id = base.GetDataValue<int>(dr, "Id");
                        bS_Level1.Description = base.GetDataValue<string>(dr, "Description");
                        bS_Level1.BSGroup = base.GetDataValue<string>(dr, "BSGroup");
                        bS_Level1.ROrder = base.GetDataValue<int>(dr, "ROrder");
                        bS_Level1.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(bS_Level1);
                    }
                }
            }

            return result;
        }
    }
}

