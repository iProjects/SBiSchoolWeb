//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// ResidenceHallRooms data access component. Manages CRUD operations for the ResidenceHallRooms table.
    /// </summary>
    public partial class ResidenceHallRoomDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ResidenceHallRooms table.
        /// </summary>
        /// <param name="residenceHallRoom">A ResidenceHallRoom object.</param>
        /// <returns>An updated ResidenceHallRoom object.</returns>
        public ResidenceHallRoom Create(ResidenceHallRoom residenceHallRoom)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ResidenceHallRooms ([HallId], [Room], [Cost], [IsDeleted]) " +
                "VALUES(@HallId, @Room, @Cost, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@HallId", DbType.Int32, residenceHallRoom.HallId);
                db.AddInParameter(cmd, "@Room", DbType.String, residenceHallRoom.Room);
                db.AddInParameter(cmd, "@Cost", DbType.Currency, residenceHallRoom.Cost);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, residenceHallRoom.IsDeleted);

                // Get the primary key value.
                residenceHallRoom.RoomId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return residenceHallRoom;
        }

        /// <summary>
        /// Updates an existing row in the ResidenceHallRooms table.
        /// </summary>
        /// <param name="residenceHallRoom">A ResidenceHallRoom entity object.</param>
        public void UpdateById(ResidenceHallRoom residenceHallRoom)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ResidenceHallRooms " +
                "SET " +
                    "[HallId]=@HallId, " +
                    "[Room]=@Room, " +
                    "[Cost]=@Cost, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [RoomId]=@RoomId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@HallId", DbType.Int32, residenceHallRoom.HallId);
                db.AddInParameter(cmd, "@Room", DbType.String, residenceHallRoom.Room);
                db.AddInParameter(cmd, "@Cost", DbType.Currency, residenceHallRoom.Cost);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, residenceHallRoom.IsDeleted);
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, residenceHallRoom.RoomId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ResidenceHallRooms table.
        /// </summary>
        /// <param name="roomId">A roomId value.</param>
        public void DeleteById(int roomId)
        {
            const string SQL_STATEMENT = "DELETE dbo.ResidenceHallRooms " +
                                         "WHERE [RoomId]=@RoomId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, roomId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ResidenceHallRooms table.
        /// </summary>
        /// <param name="roomId">A RoomId value.</param>
        /// <returns>A ResidenceHallRoom object with data populated from the database.</returns>
        public ResidenceHallRoom SelectById(int roomId)
        {
            const string SQL_STATEMENT =
                "SELECT [RoomId], [HallId], [Room], [Cost], [IsDeleted] " +
                "FROM dbo.ResidenceHallRooms  " +
                "WHERE [RoomId]=@RoomId ";

            ResidenceHallRoom residenceHallRoom = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, roomId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ResidenceHallRoom
                        residenceHallRoom = new ResidenceHallRoom();

                        // Read values.
                        residenceHallRoom.RoomId = base.GetDataValue<int>(dr, "RoomId");
                        residenceHallRoom.HallId = base.GetDataValue<int>(dr, "HallId");
                        residenceHallRoom.Room = base.GetDataValue<string>(dr, "Room");
                        residenceHallRoom.Cost = base.GetDataValue<decimal>(dr, "Cost");
                        residenceHallRoom.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return residenceHallRoom;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ResidenceHallRooms table.
        /// </summary>
        /// <returns>A collection of ResidenceHallRoom objects.</returns>		
        public List<ResidenceHallRoom> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [RoomId], [HallId], [Room], [Cost], [IsDeleted] " +
                "FROM dbo.ResidenceHallRooms ";

            List<ResidenceHallRoom> result = new List<ResidenceHallRoom>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ResidenceHallRoom
                        ResidenceHallRoom residenceHallRoom = new ResidenceHallRoom();

                        // Read values.
                        residenceHallRoom.RoomId = base.GetDataValue<int>(dr, "RoomId");
                        residenceHallRoom.HallId = base.GetDataValue<int>(dr, "HallId");
                        residenceHallRoom.Room = base.GetDataValue<string>(dr, "Room");
                        residenceHallRoom.Cost = base.GetDataValue<decimal>(dr, "Cost");
                        residenceHallRoom.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(residenceHallRoom);
                    }
                }
            }

            return result;
        }
    }
}

