//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Students data access component. Manages CRUD operations for the Students table.
    /// </summary>
    public partial class StudentDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Students table.
        /// </summary>
        /// <param name="student">A Student object.</param>
        /// <returns>An updated Student object.</returns>
        public Student Create(Student student)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Students ([SchoolId], [ClassStreamId], [AdminNo], [StudentSurName], [StudentOtherNames], [Gender], [DateOfBirth], [Phone], [Email], [Homepage], [StudentAddress], [AdmissionType], [Status], [KCPE], [KCSE], [AdmissionDate], [AdmittedBy], [Remarks], [Photo], [LastModifiedTime], [GLAccountId], [CustomerId], [FatherName], [FatherCellPhone], [FatherOfficePhone], [FatherEmail], [MotherName], [MotherCellPhone], [MotherOfficePhone], [MotherEmail], [GuardianName], [GuardianCellPhone], [GuardianOfficePhone], [GuardianEmail], [PrevSchoolId], [PrevSchoolName], [PrevSchoolPhone], [PrevSchoolAddress], [ReasonForLeaving], [ExtraCurricular1], [ExtraCurricular2], [ExtraCurricular3], [Term1MeanGrade], [Term2MeanGrade], [Term3MeanGrade], [Eligible], [RequireTransport], [TransportChargeType], [FeesPayPlan], [Boarder], [ResidenceHallRoomId], [ResidenceId], [DoctorName], [Ailments], [Foods], [Allergies], [HostelName], [BedNo], [IsDeleted]) " +
                "VALUES(@SchoolId, @ClassStreamId, @AdminNo, @StudentSurName, @StudentOtherNames, @Gender, @DateOfBirth, @Phone, @Email, @Homepage, @StudentAddress, @AdmissionType, @Status, @KCPE, @KCSE, @AdmissionDate, @AdmittedBy, @Remarks, @Photo, @LastModifiedTime, @GLAccountId, @CustomerId, @FatherName, @FatherCellPhone, @FatherOfficePhone, @FatherEmail, @MotherName, @MotherCellPhone, @MotherOfficePhone, @MotherEmail, @GuardianName, @GuardianCellPhone, @GuardianOfficePhone, @GuardianEmail, @PrevSchoolId, @PrevSchoolName, @PrevSchoolPhone, @PrevSchoolAddress, @ReasonForLeaving, @ExtraCurricular1, @ExtraCurricular2, @ExtraCurricular3, @Term1MeanGrade, @Term2MeanGrade, @Term3MeanGrade, @Eligible, @RequireTransport, @TransportChargeType, @FeesPayPlan, @Boarder, @ResidenceHallRoomId, @ResidenceId, @DoctorName, @Ailments, @Foods, @Allergies, @HostelName, @BedNo, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SchoolId", DbType.Int32, student.SchoolId);
                db.AddInParameter(cmd, "@ClassStreamId", DbType.Int32, student.ClassStreamId);
                db.AddInParameter(cmd, "@AdminNo", DbType.String, student.AdminNo);
                db.AddInParameter(cmd, "@StudentSurName", DbType.String, student.StudentSurName);
                db.AddInParameter(cmd, "@StudentOtherNames", DbType.String, student.StudentOtherNames);
                db.AddInParameter(cmd, "@Gender", DbType.String, student.Gender);
                db.AddInParameter(cmd, "@DateOfBirth", DbType.DateTime, student.DateOfBirth);
                db.AddInParameter(cmd, "@Phone", DbType.String, student.Phone);
                db.AddInParameter(cmd, "@Email", DbType.String, student.Email);
                db.AddInParameter(cmd, "@Homepage", DbType.String, student.Homepage);
                db.AddInParameter(cmd, "@StudentAddress", DbType.String, student.StudentAddress);
                db.AddInParameter(cmd, "@AdmissionType", DbType.String, student.AdmissionType);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, student.Status);
                db.AddInParameter(cmd, "@KCPE", DbType.String, student.KCPE);
                db.AddInParameter(cmd, "@KCSE", DbType.String, student.KCSE);
                db.AddInParameter(cmd, "@AdmissionDate", DbType.DateTime, student.AdmissionDate);
                db.AddInParameter(cmd, "@AdmittedBy", DbType.String, student.AdmittedBy);
                db.AddInParameter(cmd, "@Remarks", DbType.String, student.Remarks);
                db.AddInParameter(cmd, "@Photo", DbType.String, student.Photo);
                db.AddInParameter(cmd, "@LastModifiedTime", DbType.DateTime, student.LastModifiedTime);
                db.AddInParameter(cmd, "@GLAccountId", DbType.Int32, student.GLAccountId);
                db.AddInParameter(cmd, "@CustomerId", DbType.Int32, student.CustomerId);
                db.AddInParameter(cmd, "@FatherName", DbType.String, student.FatherName);
                db.AddInParameter(cmd, "@FatherCellPhone", DbType.String, student.FatherCellPhone);
                db.AddInParameter(cmd, "@FatherOfficePhone", DbType.String, student.FatherOfficePhone);
                db.AddInParameter(cmd, "@FatherEmail", DbType.String, student.FatherEmail);
                db.AddInParameter(cmd, "@MotherName", DbType.String, student.MotherName);
                db.AddInParameter(cmd, "@MotherCellPhone", DbType.String, student.MotherCellPhone);
                db.AddInParameter(cmd, "@MotherOfficePhone", DbType.String, student.MotherOfficePhone);
                db.AddInParameter(cmd, "@MotherEmail", DbType.String, student.MotherEmail);
                db.AddInParameter(cmd, "@GuardianName", DbType.String, student.GuardianName);
                db.AddInParameter(cmd, "@GuardianCellPhone", DbType.String, student.GuardianCellPhone);
                db.AddInParameter(cmd, "@GuardianOfficePhone", DbType.String, student.GuardianOfficePhone);
                db.AddInParameter(cmd, "@GuardianEmail", DbType.String, student.GuardianEmail);
                db.AddInParameter(cmd, "@PrevSchoolId", DbType.String, student.PrevSchoolId);
                db.AddInParameter(cmd, "@PrevSchoolName", DbType.String, student.PrevSchoolName);
                db.AddInParameter(cmd, "@PrevSchoolPhone", DbType.String, student.PrevSchoolPhone);
                db.AddInParameter(cmd, "@PrevSchoolAddress", DbType.String, student.PrevSchoolAddress);
                db.AddInParameter(cmd, "@ReasonForLeaving", DbType.String, student.ReasonForLeaving);
                db.AddInParameter(cmd, "@ExtraCurricular1", DbType.String, student.ExtraCurricular1);
                db.AddInParameter(cmd, "@ExtraCurricular2", DbType.String, student.ExtraCurricular2);
                db.AddInParameter(cmd, "@ExtraCurricular3", DbType.String, student.ExtraCurricular3);
                db.AddInParameter(cmd, "@Term1MeanGrade", DbType.String, student.Term1MeanGrade);
                db.AddInParameter(cmd, "@Term2MeanGrade", DbType.String, student.Term2MeanGrade);
                db.AddInParameter(cmd, "@Term3MeanGrade", DbType.String, student.Term3MeanGrade);
                db.AddInParameter(cmd, "@Eligible", DbType.Boolean, student.Eligible);
                db.AddInParameter(cmd, "@RequireTransport", DbType.Boolean, student.RequireTransport);
                db.AddInParameter(cmd, "@TransportChargeType", DbType.StringFixedLength, student.TransportChargeType);
                db.AddInParameter(cmd, "@FeesPayPlan", DbType.StringFixedLength, student.FeesPayPlan);
                db.AddInParameter(cmd, "@Boarder", DbType.Boolean, student.Boarder);
                db.AddInParameter(cmd, "@ResidenceHallRoomId", DbType.Int32, student.ResidenceHallRoomId);
                db.AddInParameter(cmd, "@ResidenceId", DbType.Int32, student.ResidenceId);
                db.AddInParameter(cmd, "@DoctorName", DbType.String, student.DoctorName);
                db.AddInParameter(cmd, "@Ailments", DbType.String, student.Ailments);
                db.AddInParameter(cmd, "@Foods", DbType.String, student.Foods);
                db.AddInParameter(cmd, "@Allergies", DbType.String, student.Allergies);
                db.AddInParameter(cmd, "@HostelName", DbType.String, student.HostelName);
                db.AddInParameter(cmd, "@BedNo", DbType.String, student.BedNo);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, student.IsDeleted);

                // Get the primary key value.
                student.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return student;
        }

        /// <summary>
        /// Updates an existing row in the Students table.
        /// </summary>
        /// <param name="student">A Student entity object.</param>
        public void UpdateById(Student student)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Students " +
                "SET " +
                    "[SchoolId]=@SchoolId, " +
                    "[ClassStreamId]=@ClassStreamId, " +
                    "[AdminNo]=@AdminNo, " +
                    "[StudentSurName]=@StudentSurName, " +
                    "[StudentOtherNames]=@StudentOtherNames, " +
                    "[Gender]=@Gender, " +
                    "[DateOfBirth]=@DateOfBirth, " +
                    "[Phone]=@Phone, " +
                    "[Email]=@Email, " +
                    "[Homepage]=@Homepage, " +
                    "[StudentAddress]=@StudentAddress, " +
                    "[AdmissionType]=@AdmissionType, " +
                    "[Status]=@Status, " +
                    "[KCPE]=@KCPE, " +
                    "[KCSE]=@KCSE, " +
                    "[AdmissionDate]=@AdmissionDate, " +
                    "[AdmittedBy]=@AdmittedBy, " +
                    "[Remarks]=@Remarks, " +
                    "[Photo]=@Photo, " +
                    "[LastModifiedTime]=@LastModifiedTime, " +
                    "[GLAccountId]=@GLAccountId, " +
                    "[CustomerId]=@CustomerId, " +
                    "[FatherName]=@FatherName, " +
                    "[FatherCellPhone]=@FatherCellPhone, " +
                    "[FatherOfficePhone]=@FatherOfficePhone, " +
                    "[FatherEmail]=@FatherEmail, " +
                    "[MotherName]=@MotherName, " +
                    "[MotherCellPhone]=@MotherCellPhone, " +
                    "[MotherOfficePhone]=@MotherOfficePhone, " +
                    "[MotherEmail]=@MotherEmail, " +
                    "[GuardianName]=@GuardianName, " +
                    "[GuardianCellPhone]=@GuardianCellPhone, " +
                    "[GuardianOfficePhone]=@GuardianOfficePhone, " +
                    "[GuardianEmail]=@GuardianEmail, " +
                    "[PrevSchoolId]=@PrevSchoolId, " +
                    "[PrevSchoolName]=@PrevSchoolName, " +
                    "[PrevSchoolPhone]=@PrevSchoolPhone, " +
                    "[PrevSchoolAddress]=@PrevSchoolAddress, " +
                    "[ReasonForLeaving]=@ReasonForLeaving, " +
                    "[ExtraCurricular1]=@ExtraCurricular1, " +
                    "[ExtraCurricular2]=@ExtraCurricular2, " +
                    "[ExtraCurricular3]=@ExtraCurricular3, " +
                    "[Term1MeanGrade]=@Term1MeanGrade, " +
                    "[Term2MeanGrade]=@Term2MeanGrade, " +
                    "[Term3MeanGrade]=@Term3MeanGrade, " +
                    "[Eligible]=@Eligible, " +
                    "[RequireTransport]=@RequireTransport, " +
                    "[TransportChargeType]=@TransportChargeType, " +
                    "[FeesPayPlan]=@FeesPayPlan, " +
                    "[Boarder]=@Boarder, " +
                    "[ResidenceHallRoomId]=@ResidenceHallRoomId, " +
                    "[ResidenceId]=@ResidenceId, " +
                    "[DoctorName]=@DoctorName, " +
                    "[Ailments]=@Ailments, " +
                    "[Foods]=@Foods, " +
                    "[Allergies]=@Allergies, " +
                    "[HostelName]=@HostelName, " +
                    "[BedNo]=@BedNo, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SchoolId", DbType.Int32, student.SchoolId);
                db.AddInParameter(cmd, "@ClassStreamId", DbType.Int32, student.ClassStreamId);
                db.AddInParameter(cmd, "@AdminNo", DbType.String, student.AdminNo);
                db.AddInParameter(cmd, "@StudentSurName", DbType.String, student.StudentSurName);
                db.AddInParameter(cmd, "@StudentOtherNames", DbType.String, student.StudentOtherNames);
                db.AddInParameter(cmd, "@Gender", DbType.String, student.Gender);
                db.AddInParameter(cmd, "@DateOfBirth", DbType.DateTime, student.DateOfBirth);
                db.AddInParameter(cmd, "@Phone", DbType.String, student.Phone);
                db.AddInParameter(cmd, "@Email", DbType.String, student.Email);
                db.AddInParameter(cmd, "@Homepage", DbType.String, student.Homepage);
                db.AddInParameter(cmd, "@StudentAddress", DbType.String, student.StudentAddress);
                db.AddInParameter(cmd, "@AdmissionType", DbType.String, student.AdmissionType);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, student.Status);
                db.AddInParameter(cmd, "@KCPE", DbType.String, student.KCPE);
                db.AddInParameter(cmd, "@KCSE", DbType.String, student.KCSE);
                db.AddInParameter(cmd, "@AdmissionDate", DbType.DateTime, student.AdmissionDate);
                db.AddInParameter(cmd, "@AdmittedBy", DbType.String, student.AdmittedBy);
                db.AddInParameter(cmd, "@Remarks", DbType.String, student.Remarks);
                db.AddInParameter(cmd, "@Photo", DbType.String, student.Photo);
                db.AddInParameter(cmd, "@LastModifiedTime", DbType.DateTime, student.LastModifiedTime);
                db.AddInParameter(cmd, "@GLAccountId", DbType.Int32, student.GLAccountId);
                db.AddInParameter(cmd, "@CustomerId", DbType.Int32, student.CustomerId);
                db.AddInParameter(cmd, "@FatherName", DbType.String, student.FatherName);
                db.AddInParameter(cmd, "@FatherCellPhone", DbType.String, student.FatherCellPhone);
                db.AddInParameter(cmd, "@FatherOfficePhone", DbType.String, student.FatherOfficePhone);
                db.AddInParameter(cmd, "@FatherEmail", DbType.String, student.FatherEmail);
                db.AddInParameter(cmd, "@MotherName", DbType.String, student.MotherName);
                db.AddInParameter(cmd, "@MotherCellPhone", DbType.String, student.MotherCellPhone);
                db.AddInParameter(cmd, "@MotherOfficePhone", DbType.String, student.MotherOfficePhone);
                db.AddInParameter(cmd, "@MotherEmail", DbType.String, student.MotherEmail);
                db.AddInParameter(cmd, "@GuardianName", DbType.String, student.GuardianName);
                db.AddInParameter(cmd, "@GuardianCellPhone", DbType.String, student.GuardianCellPhone);
                db.AddInParameter(cmd, "@GuardianOfficePhone", DbType.String, student.GuardianOfficePhone);
                db.AddInParameter(cmd, "@GuardianEmail", DbType.String, student.GuardianEmail);
                db.AddInParameter(cmd, "@PrevSchoolId", DbType.String, student.PrevSchoolId);
                db.AddInParameter(cmd, "@PrevSchoolName", DbType.String, student.PrevSchoolName);
                db.AddInParameter(cmd, "@PrevSchoolPhone", DbType.String, student.PrevSchoolPhone);
                db.AddInParameter(cmd, "@PrevSchoolAddress", DbType.String, student.PrevSchoolAddress);
                db.AddInParameter(cmd, "@ReasonForLeaving", DbType.String, student.ReasonForLeaving);
                db.AddInParameter(cmd, "@ExtraCurricular1", DbType.String, student.ExtraCurricular1);
                db.AddInParameter(cmd, "@ExtraCurricular2", DbType.String, student.ExtraCurricular2);
                db.AddInParameter(cmd, "@ExtraCurricular3", DbType.String, student.ExtraCurricular3);
                db.AddInParameter(cmd, "@Term1MeanGrade", DbType.String, student.Term1MeanGrade);
                db.AddInParameter(cmd, "@Term2MeanGrade", DbType.String, student.Term2MeanGrade);
                db.AddInParameter(cmd, "@Term3MeanGrade", DbType.String, student.Term3MeanGrade);
                db.AddInParameter(cmd, "@Eligible", DbType.Boolean, student.Eligible);
                db.AddInParameter(cmd, "@RequireTransport", DbType.Boolean, student.RequireTransport);
                db.AddInParameter(cmd, "@TransportChargeType", DbType.StringFixedLength, student.TransportChargeType);
                db.AddInParameter(cmd, "@FeesPayPlan", DbType.StringFixedLength, student.FeesPayPlan);
                db.AddInParameter(cmd, "@Boarder", DbType.Boolean, student.Boarder);
                db.AddInParameter(cmd, "@ResidenceHallRoomId", DbType.Int32, student.ResidenceHallRoomId);
                db.AddInParameter(cmd, "@ResidenceId", DbType.Int32, student.ResidenceId);
                db.AddInParameter(cmd, "@DoctorName", DbType.String, student.DoctorName);
                db.AddInParameter(cmd, "@Ailments", DbType.String, student.Ailments);
                db.AddInParameter(cmd, "@Foods", DbType.String, student.Foods);
                db.AddInParameter(cmd, "@Allergies", DbType.String, student.Allergies);
                db.AddInParameter(cmd, "@HostelName", DbType.String, student.HostelName);
                db.AddInParameter(cmd, "@BedNo", DbType.String, student.BedNo);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, student.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, student.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Students table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Students " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Students table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Student object with data populated from the database.</returns>
        public Student SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [SchoolId], [ClassStreamId], [AdminNo], [StudentSurName], [StudentOtherNames]" +
                        ", [Gender], [DateOfBirth], [Phone], [Email], [Homepage], [StudentAddress], [AdmissionType]" +
                        ", [Status], [KCPE], [KCSE], [AdmissionDate], [AdmittedBy], [Remarks], [Photo], [LastModifiedTime]" +
                        ", [GLAccountId], [CustomerId], [FatherName], [FatherCellPhone], [FatherOfficePhone]" +
                        ", [FatherEmail], [MotherName], [MotherCellPhone], [MotherOfficePhone], [MotherEmail]" +
                        ", [GuardianName], [GuardianCellPhone], [GuardianOfficePhone], [GuardianEmail], [PrevSchoolId]" +
                        ", [PrevSchoolName], [PrevSchoolPhone], [PrevSchoolAddress], [ReasonForLeaving], [ExtraCurricular1]" +
                        ", [ExtraCurricular2], [ExtraCurricular3], [Term1MeanGrade], [Term2MeanGrade], [Term3MeanGrade]" +
                        ", [Eligible], [RequireTransport], [TransportChargeType], [FeesPayPlan], [Boarder]" +
                        ", [ResidenceHallRoomId], [ResidenceId], [DoctorName], [Ailments], [Foods], [Allergies]" +
                        ", [HostelName], [BedNo], [IsDeleted] " +
                "FROM dbo.Students  " +
                "WHERE [Id]=@Id ";

            Student student = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Student
                        student = new Student();

                        // Read values.
                        student.Id = base.GetDataValue<int>(dr, "Id");
                        student.SchoolId = base.GetDataValue<int>(dr, "SchoolId");
                        student.ClassStreamId = base.GetDataValue<int>(dr, "ClassStreamId");
                        student.AdminNo = base.GetDataValue<string>(dr, "AdminNo");
                        student.StudentSurName = base.GetDataValue<string>(dr, "StudentSurName");
                        student.StudentOtherNames = base.GetDataValue<string>(dr, "StudentOtherNames");
                        student.Gender = base.GetDataValue<string>(dr, "Gender");
                        student.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        student.Phone = base.GetDataValue<string>(dr, "Phone");
                        student.Email = base.GetDataValue<string>(dr, "Email");
                        student.Homepage = base.GetDataValue<string>(dr, "Homepage");
                        student.StudentAddress = base.GetDataValue<string>(dr, "StudentAddress");
                        student.AdmissionType = base.GetDataValue<string>(dr, "AdmissionType");
                        student.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        student.KCPE = base.GetDataValue<string>(dr, "KCPE");
                        student.KCSE = base.GetDataValue<string>(dr, "KCSE");
                        student.AdmissionDate = base.GetDataValue<DateTime>(dr, "AdmissionDate");
                        student.AdmittedBy = base.GetDataValue<string>(dr, "AdmittedBy");
                        student.Remarks = base.GetDataValue<string>(dr, "Remarks");
                        student.Photo = base.GetDataValue<string>(dr, "Photo");
                        student.LastModifiedTime = base.GetDataValue<DateTime>(dr, "LastModifiedTime");
                        student.GLAccountId = base.GetDataValue<int>(dr, "GLAccountId");
                        student.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        student.FatherName = base.GetDataValue<string>(dr, "FatherName");
                        student.FatherCellPhone = base.GetDataValue<string>(dr, "FatherCellPhone");
                        student.FatherOfficePhone = base.GetDataValue<string>(dr, "FatherOfficePhone");
                        student.FatherEmail = base.GetDataValue<string>(dr, "FatherEmail");
                        student.MotherName = base.GetDataValue<string>(dr, "MotherName");
                        student.MotherCellPhone = base.GetDataValue<string>(dr, "MotherCellPhone");
                        student.MotherOfficePhone = base.GetDataValue<string>(dr, "MotherOfficePhone");
                        student.MotherEmail = base.GetDataValue<string>(dr, "MotherEmail");
                        student.GuardianName = base.GetDataValue<string>(dr, "GuardianName");
                        student.GuardianCellPhone = base.GetDataValue<string>(dr, "GuardianCellPhone");
                        student.GuardianOfficePhone = base.GetDataValue<string>(dr, "GuardianOfficePhone");
                        student.GuardianEmail = base.GetDataValue<string>(dr, "GuardianEmail");
                        student.PrevSchoolId = base.GetDataValue<string>(dr, "PrevSchoolId");
                        student.PrevSchoolName = base.GetDataValue<string>(dr, "PrevSchoolName");
                        student.PrevSchoolPhone = base.GetDataValue<string>(dr, "PrevSchoolPhone");
                        student.PrevSchoolAddress = base.GetDataValue<string>(dr, "PrevSchoolAddress");
                        student.ReasonForLeaving = base.GetDataValue<string>(dr, "ReasonForLeaving");
                        student.ExtraCurricular1 = base.GetDataValue<string>(dr, "ExtraCurricular1");
                        student.ExtraCurricular2 = base.GetDataValue<string>(dr, "ExtraCurricular2");
                        student.ExtraCurricular3 = base.GetDataValue<string>(dr, "ExtraCurricular3");
                        student.Term1MeanGrade = base.GetDataValue<string>(dr, "Term1MeanGrade");
                        student.Term2MeanGrade = base.GetDataValue<string>(dr, "Term2MeanGrade");
                        student.Term3MeanGrade = base.GetDataValue<string>(dr, "Term3MeanGrade");
                        student.Eligible = base.GetDataValue<bool>(dr, "Eligible");
                        student.RequireTransport = base.GetDataValue<bool>(dr, "RequireTransport");
                        student.TransportChargeType = Convert.ToChar(base.GetDataValue<string>(dr, "TransportChargeType"));
                        student.FeesPayPlan = Convert.ToChar(base.GetDataValue<string>(dr, "FeesPayPlan"));
                        student.Boarder = base.GetDataValue<bool>(dr, "Boarder");
                        student.ResidenceHallRoomId = base.GetDataValue<int>(dr, "ResidenceHallRoomId");
                        student.ResidenceId = base.GetDataValue<int>(dr, "ResidenceId");
                        student.DoctorName = base.GetDataValue<string>(dr, "DoctorName");
                        student.Ailments = base.GetDataValue<string>(dr, "Ailments");
                        student.Foods = base.GetDataValue<string>(dr, "Foods");
                        student.Allergies = base.GetDataValue<string>(dr, "Allergies");
                        student.HostelName = base.GetDataValue<string>(dr, "HostelName");
                        student.BedNo = base.GetDataValue<string>(dr, "BedNo");
                        student.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return student;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Students table.
        /// </summary>
        /// <returns>A collection of Student objects.</returns>		
        public List<Student> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [SchoolId], [ClassStreamId], [AdminNo], [StudentSurName], [StudentOtherNames]" +
                        ", [Gender], [DateOfBirth], [Phone], [Email], [Homepage], [StudentAddress], [AdmissionType]" +
                        ", [Status], [KCPE], [KCSE], [AdmissionDate], [AdmittedBy], [Remarks], [Photo], [LastModifiedTime]" +
                        ", [GLAccountId], [CustomerId], [FatherName], [FatherCellPhone], [FatherOfficePhone]" +
                        ", [FatherEmail], [MotherName], [MotherCellPhone], [MotherOfficePhone], [MotherEmail]" +
                        ", [GuardianName], [GuardianCellPhone], [GuardianOfficePhone], [GuardianEmail], [PrevSchoolId]" +
                        ", [PrevSchoolName], [PrevSchoolPhone], [PrevSchoolAddress], [ReasonForLeaving], [ExtraCurricular1]" +
                        ", [ExtraCurricular2], [ExtraCurricular3], [Term1MeanGrade], [Term2MeanGrade], [Term3MeanGrade]" +
                        ", [Eligible], [RequireTransport], [TransportChargeType], [FeesPayPlan], [Boarder]" +
                        ", [ResidenceHallRoomId], [ResidenceId], [DoctorName], [Ailments], [Foods], [Allergies]" +
                        ", [HostelName], [BedNo], [IsDeleted] " +
                "FROM dbo.Students ";

            List<Student> result = new List<Student>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Student
                        Student student = new Student();

                        // Read values.
                        student.Id = base.GetDataValue<int>(dr, "Id");
                        student.SchoolId = base.GetDataValue<int>(dr, "SchoolId");
                        student.ClassStreamId = base.GetDataValue<int>(dr, "ClassStreamId");
                        student.AdminNo = base.GetDataValue<string>(dr, "AdminNo");
                        student.StudentSurName = base.GetDataValue<string>(dr, "StudentSurName");
                        student.StudentOtherNames = base.GetDataValue<string>(dr, "StudentOtherNames");
                        student.Gender = base.GetDataValue<string>(dr, "Gender");
                        student.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        student.Phone = base.GetDataValue<string>(dr, "Phone");
                        student.Email = base.GetDataValue<string>(dr, "Email");
                        student.Homepage = base.GetDataValue<string>(dr, "Homepage");
                        student.StudentAddress = base.GetDataValue<string>(dr, "StudentAddress");
                        student.AdmissionType = base.GetDataValue<string>(dr, "AdmissionType");
                        student.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        student.KCPE = base.GetDataValue<string>(dr, "KCPE");
                        student.KCSE = base.GetDataValue<string>(dr, "KCSE");
                        student.AdmissionDate = base.GetDataValue<DateTime>(dr, "AdmissionDate");
                        student.AdmittedBy = base.GetDataValue<string>(dr, "AdmittedBy");
                        student.Remarks = base.GetDataValue<string>(dr, "Remarks");
                        student.Photo = base.GetDataValue<string>(dr, "Photo");
                        student.LastModifiedTime = base.GetDataValue<DateTime>(dr, "LastModifiedTime");
                        student.GLAccountId = base.GetDataValue<int>(dr, "GLAccountId");
                        student.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        student.FatherName = base.GetDataValue<string>(dr, "FatherName");
                        student.FatherCellPhone = base.GetDataValue<string>(dr, "FatherCellPhone");
                        student.FatherOfficePhone = base.GetDataValue<string>(dr, "FatherOfficePhone");
                        student.FatherEmail = base.GetDataValue<string>(dr, "FatherEmail");
                        student.MotherName = base.GetDataValue<string>(dr, "MotherName");
                        student.MotherCellPhone = base.GetDataValue<string>(dr, "MotherCellPhone");
                        student.MotherOfficePhone = base.GetDataValue<string>(dr, "MotherOfficePhone");
                        student.MotherEmail = base.GetDataValue<string>(dr, "MotherEmail");
                        student.GuardianName = base.GetDataValue<string>(dr, "GuardianName");
                        student.GuardianCellPhone = base.GetDataValue<string>(dr, "GuardianCellPhone");
                        student.GuardianOfficePhone = base.GetDataValue<string>(dr, "GuardianOfficePhone");
                        student.GuardianEmail = base.GetDataValue<string>(dr, "GuardianEmail");
                        student.PrevSchoolId = base.GetDataValue<string>(dr, "PrevSchoolId");
                        student.PrevSchoolName = base.GetDataValue<string>(dr, "PrevSchoolName");
                        student.PrevSchoolPhone = base.GetDataValue<string>(dr, "PrevSchoolPhone");
                        student.PrevSchoolAddress = base.GetDataValue<string>(dr, "PrevSchoolAddress");
                        student.ReasonForLeaving = base.GetDataValue<string>(dr, "ReasonForLeaving");
                        student.ExtraCurricular1 = base.GetDataValue<string>(dr, "ExtraCurricular1");
                        student.ExtraCurricular2 = base.GetDataValue<string>(dr, "ExtraCurricular2");
                        student.ExtraCurricular3 = base.GetDataValue<string>(dr, "ExtraCurricular3");
                        student.Term1MeanGrade = base.GetDataValue<string>(dr, "Term1MeanGrade");
                        student.Term2MeanGrade = base.GetDataValue<string>(dr, "Term2MeanGrade");
                        student.Term3MeanGrade = base.GetDataValue<string>(dr, "Term3MeanGrade");
                        student.Eligible = base.GetDataValue<bool>(dr, "Eligible");
                        student.RequireTransport = base.GetDataValue<bool>(dr, "RequireTransport");
                        student.TransportChargeType = Convert.ToChar(base.GetDataValue<string>(dr, "TransportChargeType"));
                        student.FeesPayPlan = Convert.ToChar(base.GetDataValue<string>(dr, "FeesPayPlan"));
                        student.Boarder = base.GetDataValue<bool>(dr, "Boarder");
                        student.ResidenceHallRoomId = base.GetDataValue<int>(dr, "ResidenceHallRoomId");
                        student.ResidenceId = base.GetDataValue<int>(dr, "ResidenceId");
                        student.DoctorName = base.GetDataValue<string>(dr, "DoctorName");
                        student.Ailments = base.GetDataValue<string>(dr, "Ailments");
                        student.Foods = base.GetDataValue<string>(dr, "Foods");
                        student.Allergies = base.GetDataValue<string>(dr, "Allergies");
                        student.HostelName = base.GetDataValue<string>(dr, "HostelName");
                        student.BedNo = base.GetDataValue<string>(dr, "BedNo");
                        student.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(student);
                    }
                }
            }

            return result;
        }
    }
}

