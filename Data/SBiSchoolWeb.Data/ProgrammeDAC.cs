//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/14/2015 18:42:21 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Programmes data access component. Manages CRUD operations for the Programmes table.
    /// </summary>
    public partial class ProgrammeDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Programmes table.
        /// </summary>
        /// <param name="programme">A Programme object.</param>
        /// <returns>An updated Programme object.</returns>
        public Programme Create(Programme programme)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Programmes ([Id], [Description], [Hours], [Fees], [Status], [IsDefault], [IsDeleted]) " +
                "VALUES(@Id, @Description, @Hours, @Fees, @Status, @IsDefault, @IsDeleted);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.String, programme.Id);
                db.AddInParameter(cmd, "@Description", DbType.String, programme.Description);
                db.AddInParameter(cmd, "@Hours", DbType.Int32, programme.Hours);
                db.AddInParameter(cmd, "@Fees", DbType.Currency, programme.Fees);
                db.AddInParameter(cmd, "@Status", DbType.String, programme.Status);
                db.AddInParameter(cmd, "@IsDefault", DbType.Boolean, programme.IsDefault);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, programme.IsDeleted);

                db.ExecuteNonQuery(cmd);
            }

            return programme;
        }

        /// <summary>
        /// Updates an existing row in the Programmes table.
        /// </summary>
        /// <param name="programme">A Programme entity object.</param>
        public void UpdateById(Programme programme)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Programmes " +
                "SET " +
                    "[Description]=@Description, " +
                    "[Hours]=@Hours, " +
                    "[Fees]=@Fees, " +
                    "[Status]=@Status, " +
                    "[IsDefault]=@IsDefault, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, programme.Description);
                db.AddInParameter(cmd, "@Hours", DbType.Int32, programme.Hours);
                db.AddInParameter(cmd, "@Fees", DbType.Currency, programme.Fees);
                db.AddInParameter(cmd, "@Status", DbType.String, programme.Status);
                db.AddInParameter(cmd, "@IsDefault", DbType.Boolean, programme.IsDefault);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, programme.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.String, programme.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Programmes table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(string id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Programmes " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.String, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Programmes table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Programme object with data populated from the database.</returns>
        public Programme SelectById(string id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [Hours], [Fees], [Status], [IsDefault], [IsDeleted] " +
                "FROM dbo.Programmes  " +
                "WHERE [Id]=@Id ";

            Programme programme = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.String, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Programme
                        programme = new Programme();

                        // Read values.
                        programme.Id = base.GetDataValue<string>(dr, "Id");
                        programme.Description = base.GetDataValue<string>(dr, "Description");
                        programme.Hours = base.GetDataValue<int>(dr, "Hours");
                        programme.Fees = base.GetDataValue<decimal>(dr, "Fees");
                        programme.Status = base.GetDataValue<string>(dr, "Status");
                        programme.IsDefault = base.GetDataValue<bool>(dr, "IsDefault");
                        programme.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return programme;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Programmes table.
        /// </summary>
        /// <returns>A collection of Programme objects.</returns>		
        public List<Programme> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [Hours], [Fees], [Status], [IsDefault], [IsDeleted] " +
                "FROM dbo.Programmes ";

            List<Programme> result = new List<Programme>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Programme
                        Programme programme = new Programme();

                        // Read values.
                        programme.Id = base.GetDataValue<string>(dr, "Id");
                        programme.Description = base.GetDataValue<string>(dr, "Description");
                        programme.Hours = base.GetDataValue<int>(dr, "Hours");
                        programme.Fees = base.GetDataValue<decimal>(dr, "Fees");
                        programme.Status = base.GetDataValue<string>(dr, "Status");
                        programme.IsDefault = base.GetDataValue<bool>(dr, "IsDefault");
                        programme.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(programme);
                    }
                }
            }

            return result;
        }
    }
}

