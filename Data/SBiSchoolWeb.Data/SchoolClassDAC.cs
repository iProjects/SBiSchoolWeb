//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/14/2015 19:04:06 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// SchoolClasses data access component. Manages CRUD operations for the SchoolClasses table.
    /// </summary>
    public partial class SchoolClassDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the SchoolClasses table.
        /// </summary>
        /// <param name="schoolClass">A SchoolClass object.</param>
        /// <returns>An updated SchoolClass object.</returns>
        public SchoolClass Create(SchoolClass schoolClass)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.SchoolClasses ([ShortCode], [ClassName], [ProgrammeYearId], [NoOfSubjects], [TeacherId], [CurrentYrLevel], [NextYrLevel], [Remarks], [Status], [IsDeleted]) " +
                "VALUES(@ShortCode, @ClassName, @ProgrammeYearId, @NoOfSubjects, @TeacherId, @CurrentYrLevel, @NextYrLevel, @Remarks, @Status, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ShortCode", DbType.String, schoolClass.ShortCode);
                db.AddInParameter(cmd, "@ClassName", DbType.String, schoolClass.ClassName);
                db.AddInParameter(cmd, "@ProgrammeYearId", DbType.Int32, schoolClass.ProgrammeYearId);
                db.AddInParameter(cmd, "@NoOfSubjects", DbType.Int32, schoolClass.NoOfSubjects);
                db.AddInParameter(cmd, "@TeacherId", DbType.Int32, schoolClass.TeacherId);
                db.AddInParameter(cmd, "@CurrentYrLevel", DbType.Int32, schoolClass.CurrentYrLevel);
                db.AddInParameter(cmd, "@NextYrLevel", DbType.Int32, schoolClass.NextYrLevel);
                db.AddInParameter(cmd, "@Remarks", DbType.String, schoolClass.Remarks);
                db.AddInParameter(cmd, "@Status", DbType.String, schoolClass.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, schoolClass.IsDeleted);

                // Get the primary key value.
                schoolClass.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return schoolClass;
        }

        /// <summary>
        /// Updates an existing row in the SchoolClasses table.
        /// </summary>
        /// <param name="schoolClass">A SchoolClass entity object.</param>
        public void UpdateById(SchoolClass schoolClass)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.SchoolClasses " +
                "SET " +
                    "[ShortCode]=@ShortCode, " +
                    "[ClassName]=@ClassName, " +
                    "[ProgrammeYearId]=@ProgrammeYearId, " +
                    "[NoOfSubjects]=@NoOfSubjects, " +
                    "[TeacherId]=@TeacherId, " +
                    "[CurrentYrLevel]=@CurrentYrLevel, " +
                    "[NextYrLevel]=@NextYrLevel, " +
                    "[Remarks]=@Remarks, " +
                    "[Status]=@Status, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ShortCode", DbType.String, schoolClass.ShortCode);
                db.AddInParameter(cmd, "@ClassName", DbType.String, schoolClass.ClassName);
                db.AddInParameter(cmd, "@ProgrammeYearId", DbType.Int32, schoolClass.ProgrammeYearId);
                db.AddInParameter(cmd, "@NoOfSubjects", DbType.Int32, schoolClass.NoOfSubjects);
                db.AddInParameter(cmd, "@TeacherId", DbType.Int32, schoolClass.TeacherId);
                db.AddInParameter(cmd, "@CurrentYrLevel", DbType.Int32, schoolClass.CurrentYrLevel);
                db.AddInParameter(cmd, "@NextYrLevel", DbType.Int32, schoolClass.NextYrLevel);
                db.AddInParameter(cmd, "@Remarks", DbType.String, schoolClass.Remarks);
                db.AddInParameter(cmd, "@Status", DbType.String, schoolClass.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, schoolClass.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, schoolClass.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the SchoolClasses table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.SchoolClasses " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the SchoolClasses table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A SchoolClass object with data populated from the database.</returns>
        public SchoolClass SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ShortCode], [ClassName], [ProgrammeYearId], [NoOfSubjects], [TeacherId], [CurrentYrLevel]" +
                        ", [NextYrLevel], [Remarks], [Status], [IsDeleted] " +
                "FROM dbo.SchoolClasses  " +
                "WHERE [Id]=@Id ";

            SchoolClass schoolClass = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new SchoolClass
                        schoolClass = new SchoolClass();

                        // Read values.
                        schoolClass.Id = base.GetDataValue<int>(dr, "Id");
                        schoolClass.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        schoolClass.ClassName = base.GetDataValue<string>(dr, "ClassName");
                        schoolClass.ProgrammeYearId = base.GetDataValue<int>(dr, "ProgrammeYearId");
                        schoolClass.NoOfSubjects = base.GetDataValue<int>(dr, "NoOfSubjects");
                        schoolClass.TeacherId = base.GetDataValue<int>(dr, "TeacherId");
                        schoolClass.CurrentYrLevel = base.GetDataValue<int>(dr, "CurrentYrLevel");
                        schoolClass.NextYrLevel = base.GetDataValue<int>(dr, "NextYrLevel");
                        schoolClass.Remarks = base.GetDataValue<string>(dr, "Remarks");
                        schoolClass.Status = base.GetDataValue<string>(dr, "Status");
                        schoolClass.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return schoolClass;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the SchoolClasses table.
        /// </summary>
        /// <returns>A collection of SchoolClass objects.</returns>		
        public List<SchoolClass> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ShortCode], [ClassName], [ProgrammeYearId], [NoOfSubjects], [TeacherId], [CurrentYrLevel]" +
                        ", [NextYrLevel], [Remarks], [Status], [IsDeleted] " +
                "FROM dbo.SchoolClasses ";

            List<SchoolClass> result = new List<SchoolClass>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new SchoolClass
                        SchoolClass schoolClass = new SchoolClass();

                        // Read values.
                        schoolClass.Id = base.GetDataValue<int>(dr, "Id");
                        schoolClass.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        schoolClass.ClassName = base.GetDataValue<string>(dr, "ClassName");
                        schoolClass.ProgrammeYearId = base.GetDataValue<int>(dr, "ProgrammeYearId");
                        schoolClass.NoOfSubjects = base.GetDataValue<int>(dr, "NoOfSubjects");
                        schoolClass.TeacherId = base.GetDataValue<int>(dr, "TeacherId");
                        schoolClass.CurrentYrLevel = base.GetDataValue<int>(dr, "CurrentYrLevel");
                        schoolClass.NextYrLevel = base.GetDataValue<int>(dr, "NextYrLevel");
                        schoolClass.Remarks = base.GetDataValue<string>(dr, "Remarks");
                        schoolClass.Status = base.GetDataValue<string>(dr, "Status");
                        schoolClass.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(schoolClass);
                    }
                }
            }

            return result;
        }
    }
}

