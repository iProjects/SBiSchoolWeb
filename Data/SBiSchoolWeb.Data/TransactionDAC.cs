//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Transactions data access component. Manages CRUD operations for the Transactions table.
    /// </summary>
    public partial class TransactionDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Transactions table.
        /// </summary>
        /// <param name="transaction">A Transaction object.</param>
        /// <returns>An updated Transaction object.</returns>
        public Transaction Create(Transaction transaction)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Transactions ([TransactionTypeId], [AccountId], [Amount], [PostDate], [RecordDate], [ValueDate], [Narrative], [StatementFlag], [Authorizer], [UserName], [TransRef], [IsDeleted]) " +
                "VALUES(@TransactionTypeId, @AccountId, @Amount, @PostDate, @RecordDate, @ValueDate, @Narrative, @StatementFlag, @Authorizer, @UserName, @TransRef, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TransactionTypeId", DbType.Int32, transaction.TransactionTypeId);
                db.AddInParameter(cmd, "@AccountId", DbType.Int32, transaction.AccountId);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, transaction.Amount);
                db.AddInParameter(cmd, "@PostDate", DbType.DateTime, transaction.PostDate);
                db.AddInParameter(cmd, "@RecordDate", DbType.DateTime, transaction.RecordDate);
                db.AddInParameter(cmd, "@ValueDate", DbType.DateTime, transaction.ValueDate);
                db.AddInParameter(cmd, "@Narrative", DbType.String, transaction.Narrative);
                db.AddInParameter(cmd, "@StatementFlag", DbType.String, transaction.StatementFlag);
                db.AddInParameter(cmd, "@Authorizer", DbType.String, transaction.Authorizer);
                db.AddInParameter(cmd, "@UserName", DbType.String, transaction.UserName);
                db.AddInParameter(cmd, "@TransRef", DbType.String, transaction.TransRef);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, transaction.IsDeleted);

                // Get the primary key value.
                transaction.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return transaction;
        }

        /// <summary>
        /// Updates an existing row in the Transactions table.
        /// </summary>
        /// <param name="transaction">A Transaction entity object.</param>
        public void UpdateById(Transaction transaction)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Transactions " +
                "SET " +
                    "[TransactionTypeId]=@TransactionTypeId, " +
                    "[AccountId]=@AccountId, " +
                    "[Amount]=@Amount, " +
                    "[PostDate]=@PostDate, " +
                    "[RecordDate]=@RecordDate, " +
                    "[ValueDate]=@ValueDate, " +
                    "[Narrative]=@Narrative, " +
                    "[StatementFlag]=@StatementFlag, " +
                    "[Authorizer]=@Authorizer, " +
                    "[UserName]=@UserName, " +
                    "[TransRef]=@TransRef, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TransactionTypeId", DbType.Int32, transaction.TransactionTypeId);
                db.AddInParameter(cmd, "@AccountId", DbType.Int32, transaction.AccountId);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, transaction.Amount);
                db.AddInParameter(cmd, "@PostDate", DbType.DateTime, transaction.PostDate);
                db.AddInParameter(cmd, "@RecordDate", DbType.DateTime, transaction.RecordDate);
                db.AddInParameter(cmd, "@ValueDate", DbType.DateTime, transaction.ValueDate);
                db.AddInParameter(cmd, "@Narrative", DbType.String, transaction.Narrative);
                db.AddInParameter(cmd, "@StatementFlag", DbType.String, transaction.StatementFlag);
                db.AddInParameter(cmd, "@Authorizer", DbType.String, transaction.Authorizer);
                db.AddInParameter(cmd, "@UserName", DbType.String, transaction.UserName);
                db.AddInParameter(cmd, "@TransRef", DbType.String, transaction.TransRef);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, transaction.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, transaction.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Transactions table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Transactions " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Transactions table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Transaction object with data populated from the database.</returns>
        public Transaction SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [TransactionTypeId], [AccountId], [Amount], [PostDate], [RecordDate], [ValueDate]" +
                        ", [Narrative], [StatementFlag], [Authorizer], [UserName], [TransRef], [IsDeleted]" +
                        " " +
                "FROM dbo.Transactions  " +
                "WHERE [Id]=@Id ";

            Transaction transaction = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Transaction
                        transaction = new Transaction();

                        // Read values.
                        transaction.Id = base.GetDataValue<int>(dr, "Id");
                        transaction.TransactionTypeId = base.GetDataValue<int>(dr, "TransactionTypeId");
                        transaction.AccountId = base.GetDataValue<int>(dr, "AccountId");
                        transaction.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        transaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        transaction.RecordDate = base.GetDataValue<DateTime>(dr, "RecordDate");
                        transaction.ValueDate = base.GetDataValue<DateTime>(dr, "ValueDate");
                        transaction.Narrative = base.GetDataValue<string>(dr, "Narrative");
                        transaction.StatementFlag = base.GetDataValue<string>(dr, "StatementFlag");
                        transaction.Authorizer = base.GetDataValue<string>(dr, "Authorizer");
                        transaction.UserName = base.GetDataValue<string>(dr, "UserName");
                        transaction.TransRef = base.GetDataValue<string>(dr, "TransRef");
                        transaction.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return transaction;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Transactions table.
        /// </summary>
        /// <returns>A collection of Transaction objects.</returns>		
        public List<Transaction> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [TransactionTypeId], [AccountId], [Amount], [PostDate], [RecordDate], [ValueDate]" +
                        ", [Narrative], [StatementFlag], [Authorizer], [UserName], [TransRef], [IsDeleted]" +
                        " " +
                "FROM dbo.Transactions ";

            List<Transaction> result = new List<Transaction>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Transaction
                        Transaction transaction = new Transaction();

                        // Read values.
                        transaction.Id = base.GetDataValue<int>(dr, "Id");
                        transaction.TransactionTypeId = base.GetDataValue<int>(dr, "TransactionTypeId");
                        transaction.AccountId = base.GetDataValue<int>(dr, "AccountId");
                        transaction.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        transaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        transaction.RecordDate = base.GetDataValue<DateTime>(dr, "RecordDate");
                        transaction.ValueDate = base.GetDataValue<DateTime>(dr, "ValueDate");
                        transaction.Narrative = base.GetDataValue<string>(dr, "Narrative");
                        transaction.StatementFlag = base.GetDataValue<string>(dr, "StatementFlag");
                        transaction.Authorizer = base.GetDataValue<string>(dr, "Authorizer");
                        transaction.UserName = base.GetDataValue<string>(dr, "UserName");
                        transaction.TransRef = base.GetDataValue<string>(dr, "TransRef");
                        transaction.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(transaction);
                    }
                }
            }

            return result;
        }
    }
}

