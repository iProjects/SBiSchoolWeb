//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Customers data access component. Manages CRUD operations for the Customers table.
    /// </summary>
    public partial class CustomerDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Customers table.
        /// </summary>
        /// <param name="customer">A Customer object.</param>
        /// <returns>An updated Customer object.</returns>
        public Customer Create(Customer customer)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Customers ([CustomerName], [CustomerNo], [Address], [Telephone], [Email], [Branch], [BillToName], [BillToAddress], [BillToTelephone], [BillToEmail], [StudentId], [DateofCreation], [Status], [IsDeleted]) " +
                "VALUES(@CustomerName, @CustomerNo, @Address, @Telephone, @Email, @Branch, @BillToName, @BillToAddress, @BillToTelephone, @BillToEmail, @StudentId, @DateofCreation, @Status, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@CustomerName", DbType.String, customer.CustomerName);
                db.AddInParameter(cmd, "@CustomerNo", DbType.String, customer.CustomerNo);
                db.AddInParameter(cmd, "@Address", DbType.String, customer.Address);
                db.AddInParameter(cmd, "@Telephone", DbType.String, customer.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, customer.Email);
                db.AddInParameter(cmd, "@Branch", DbType.Int32, customer.Branch);
                db.AddInParameter(cmd, "@BillToName", DbType.String, customer.BillToName);
                db.AddInParameter(cmd, "@BillToAddress", DbType.String, customer.BillToAddress);
                db.AddInParameter(cmd, "@BillToTelephone", DbType.String, customer.BillToTelephone);
                db.AddInParameter(cmd, "@BillToEmail", DbType.String, customer.BillToEmail);
                db.AddInParameter(cmd, "@StudentId", DbType.Int32, customer.StudentId);
                db.AddInParameter(cmd, "@DateofCreation", DbType.DateTime, customer.DateofCreation);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, customer.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, customer.IsDeleted);

                // Get the primary key value.
                customer.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return customer;
        }

        /// <summary>
        /// Updates an existing row in the Customers table.
        /// </summary>
        /// <param name="customer">A Customer entity object.</param>
        public void UpdateById(Customer customer)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Customers " +
                "SET " +
                    "[CustomerName]=@CustomerName, " +
                    "[CustomerNo]=@CustomerNo, " +
                    "[Address]=@Address, " +
                    "[Telephone]=@Telephone, " +
                    "[Email]=@Email, " +
                    "[Branch]=@Branch, " +
                    "[BillToName]=@BillToName, " +
                    "[BillToAddress]=@BillToAddress, " +
                    "[BillToTelephone]=@BillToTelephone, " +
                    "[BillToEmail]=@BillToEmail, " +
                    "[StudentId]=@StudentId, " +
                    "[DateofCreation]=@DateofCreation, " +
                    "[Status]=@Status, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@CustomerName", DbType.String, customer.CustomerName);
                db.AddInParameter(cmd, "@CustomerNo", DbType.String, customer.CustomerNo);
                db.AddInParameter(cmd, "@Address", DbType.String, customer.Address);
                db.AddInParameter(cmd, "@Telephone", DbType.String, customer.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, customer.Email);
                db.AddInParameter(cmd, "@Branch", DbType.Int32, customer.Branch);
                db.AddInParameter(cmd, "@BillToName", DbType.String, customer.BillToName);
                db.AddInParameter(cmd, "@BillToAddress", DbType.String, customer.BillToAddress);
                db.AddInParameter(cmd, "@BillToTelephone", DbType.String, customer.BillToTelephone);
                db.AddInParameter(cmd, "@BillToEmail", DbType.String, customer.BillToEmail);
                db.AddInParameter(cmd, "@StudentId", DbType.Int32, customer.StudentId);
                db.AddInParameter(cmd, "@DateofCreation", DbType.DateTime, customer.DateofCreation);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, customer.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, customer.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, customer.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Customers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Customers " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Customers table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Customer object with data populated from the database.</returns>
        public Customer SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [CustomerName], [CustomerNo], [Address], [Telephone], [Email], [Branch], [BillToName]" +
                        ", [BillToAddress], [BillToTelephone], [BillToEmail], [StudentId], [DateofCreation]" +
                        ", [Status], [IsDeleted] " +
                "FROM dbo.Customers  " +
                "WHERE [Id]=@Id ";

            Customer customer = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Customer
                        customer = new Customer();

                        // Read values.
                        customer.Id = base.GetDataValue<int>(dr, "Id");
                        customer.CustomerName = base.GetDataValue<string>(dr, "CustomerName");
                        customer.CustomerNo = base.GetDataValue<string>(dr, "CustomerNo");
                        customer.Address = base.GetDataValue<string>(dr, "Address");
                        customer.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        customer.Email = base.GetDataValue<string>(dr, "Email");
                        customer.Branch = base.GetDataValue<int>(dr, "Branch");
                        customer.BillToName = base.GetDataValue<string>(dr, "BillToName");
                        customer.BillToAddress = base.GetDataValue<string>(dr, "BillToAddress");
                        customer.BillToTelephone = base.GetDataValue<string>(dr, "BillToTelephone");
                        customer.BillToEmail = base.GetDataValue<string>(dr, "BillToEmail");
                        customer.StudentId = base.GetDataValue<int>(dr, "StudentId");
                        customer.DateofCreation = base.GetDataValue<DateTime>(dr, "DateofCreation");
                        customer.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        customer.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return customer;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Customers table.
        /// </summary>
        /// <returns>A collection of Customer objects.</returns>		
        public List<Customer> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [CustomerName], [CustomerNo], [Address], [Telephone], [Email], [Branch], [BillToName]" +
                        ", [BillToAddress], [BillToTelephone], [BillToEmail], [StudentId], [DateofCreation]" +
                        ", [Status], [IsDeleted] " +
                "FROM dbo.Customers ";

            List<Customer> result = new List<Customer>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Customer
                        Customer customer = new Customer();

                        // Read values.
                        customer.Id = base.GetDataValue<int>(dr, "Id");
                        customer.CustomerName = base.GetDataValue<string>(dr, "CustomerName");
                        customer.CustomerNo = base.GetDataValue<string>(dr, "CustomerNo");
                        customer.Address = base.GetDataValue<string>(dr, "Address");
                        customer.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        customer.Email = base.GetDataValue<string>(dr, "Email");
                        customer.Branch = base.GetDataValue<int>(dr, "Branch");
                        customer.BillToName = base.GetDataValue<string>(dr, "BillToName");
                        customer.BillToAddress = base.GetDataValue<string>(dr, "BillToAddress");
                        customer.BillToTelephone = base.GetDataValue<string>(dr, "BillToTelephone");
                        customer.BillToEmail = base.GetDataValue<string>(dr, "BillToEmail");
                        customer.StudentId = base.GetDataValue<int>(dr, "StudentId");
                        customer.DateofCreation = base.GetDataValue<DateTime>(dr, "DateofCreation");
                        customer.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        customer.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(customer);
                    }
                }
            }

            return result;
        }
    }
}

