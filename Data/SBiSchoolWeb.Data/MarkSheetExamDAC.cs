//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// MarkSheetExams data access component. Manages CRUD operations for the MarkSheetExams table.
    /// </summary>
    public partial class MarkSheetExamDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the MarkSheetExams table.
        /// </summary>
        /// <param name="markSheetExam">A MarkSheetExam object.</param>
        /// <returns>An updated MarkSheetExam object.</returns>
        public MarkSheetExam Create(MarkSheetExam markSheetExam)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.MarkSheetExams ([Year], [Term], [ExamDate], [Class], [Subject], [ExamType], [LastModified], [ModifiedBy], [Enabled], [Closed], [IsDeleted]) " +
                "VALUES(@Year, @Term, @ExamDate, @Class, @Subject, @ExamType, @LastModified, @ModifiedBy, @Enabled, @Closed, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Year", DbType.Int32, markSheetExam.Year);
                db.AddInParameter(cmd, "@Term", DbType.Int32, markSheetExam.Term);
                db.AddInParameter(cmd, "@ExamDate", DbType.DateTime, markSheetExam.ExamDate);
                db.AddInParameter(cmd, "@Class", DbType.String, markSheetExam.Class);
                db.AddInParameter(cmd, "@Subject", DbType.String, markSheetExam.Subject);
                db.AddInParameter(cmd, "@ExamType", DbType.String, markSheetExam.ExamType);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime, markSheetExam.LastModified);
                db.AddInParameter(cmd, "@ModifiedBy", DbType.String, markSheetExam.ModifiedBy);
                db.AddInParameter(cmd, "@Enabled", DbType.Boolean, markSheetExam.Enabled);
                db.AddInParameter(cmd, "@Closed", DbType.Boolean, markSheetExam.Closed);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, markSheetExam.IsDeleted);

                // Get the primary key value.
                markSheetExam.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return markSheetExam;
        }

        /// <summary>
        /// Updates an existing row in the MarkSheetExams table.
        /// </summary>
        /// <param name="markSheetExam">A MarkSheetExam entity object.</param>
        public void UpdateById(MarkSheetExam markSheetExam)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.MarkSheetExams " +
                "SET " +
                    "[Year]=@Year, " +
                    "[Term]=@Term, " +
                    "[ExamDate]=@ExamDate, " +
                    "[Class]=@Class, " +
                    "[Subject]=@Subject, " +
                    "[ExamType]=@ExamType, " +
                    "[LastModified]=@LastModified, " +
                    "[ModifiedBy]=@ModifiedBy, " +
                    "[Enabled]=@Enabled, " +
                    "[Closed]=@Closed, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Year", DbType.Int32, markSheetExam.Year);
                db.AddInParameter(cmd, "@Term", DbType.Int32, markSheetExam.Term);
                db.AddInParameter(cmd, "@ExamDate", DbType.DateTime, markSheetExam.ExamDate);
                db.AddInParameter(cmd, "@Class", DbType.String, markSheetExam.Class);
                db.AddInParameter(cmd, "@Subject", DbType.String, markSheetExam.Subject);
                db.AddInParameter(cmd, "@ExamType", DbType.String, markSheetExam.ExamType);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime, markSheetExam.LastModified);
                db.AddInParameter(cmd, "@ModifiedBy", DbType.String, markSheetExam.ModifiedBy);
                db.AddInParameter(cmd, "@Enabled", DbType.Boolean, markSheetExam.Enabled);
                db.AddInParameter(cmd, "@Closed", DbType.Boolean, markSheetExam.Closed);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, markSheetExam.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, markSheetExam.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the MarkSheetExams table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.MarkSheetExams " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the MarkSheetExams table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A MarkSheetExam object with data populated from the database.</returns>
        public MarkSheetExam SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Year], [Term], [ExamDate], [Class], [Subject], [ExamType], [LastModified]" +
                        ", [ModifiedBy], [Enabled], [Closed], [IsDeleted] " +
                "FROM dbo.MarkSheetExams  " +
                "WHERE [Id]=@Id ";

            MarkSheetExam markSheetExam = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new MarkSheetExam
                        markSheetExam = new MarkSheetExam();

                        // Read values.
                        markSheetExam.Id = base.GetDataValue<int>(dr, "Id");
                        markSheetExam.Year = base.GetDataValue<int>(dr, "Year");
                        markSheetExam.Term = base.GetDataValue<int>(dr, "Term");
                        markSheetExam.ExamDate = base.GetDataValue<DateTime>(dr, "ExamDate");
                        markSheetExam.Class = base.GetDataValue<string>(dr, "Class");
                        markSheetExam.Subject = base.GetDataValue<string>(dr, "Subject");
                        markSheetExam.ExamType = base.GetDataValue<string>(dr, "ExamType");
                        markSheetExam.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                        markSheetExam.ModifiedBy = base.GetDataValue<string>(dr, "ModifiedBy");
                        markSheetExam.Enabled = base.GetDataValue<bool>(dr, "Enabled");
                        markSheetExam.Closed = base.GetDataValue<bool>(dr, "Closed");
                        markSheetExam.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return markSheetExam;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MarkSheetExams table.
        /// </summary>
        /// <returns>A collection of MarkSheetExam objects.</returns>		
        public List<MarkSheetExam> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Year], [Term], [ExamDate], [Class], [Subject], [ExamType], [LastModified]" +
                        ", [ModifiedBy], [Enabled], [Closed], [IsDeleted] " +
                "FROM dbo.MarkSheetExams ";

            List<MarkSheetExam> result = new List<MarkSheetExam>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MarkSheetExam
                        MarkSheetExam markSheetExam = new MarkSheetExam();

                        // Read values.
                        markSheetExam.Id = base.GetDataValue<int>(dr, "Id");
                        markSheetExam.Year = base.GetDataValue<int>(dr, "Year");
                        markSheetExam.Term = base.GetDataValue<int>(dr, "Term");
                        markSheetExam.ExamDate = base.GetDataValue<DateTime>(dr, "ExamDate");
                        markSheetExam.Class = base.GetDataValue<string>(dr, "Class");
                        markSheetExam.Subject = base.GetDataValue<string>(dr, "Subject");
                        markSheetExam.ExamType = base.GetDataValue<string>(dr, "ExamType");
                        markSheetExam.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                        markSheetExam.ModifiedBy = base.GetDataValue<string>(dr, "ModifiedBy");
                        markSheetExam.Enabled = base.GetDataValue<bool>(dr, "Enabled");
                        markSheetExam.Closed = base.GetDataValue<bool>(dr, "Closed");
                        markSheetExam.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(markSheetExam);
                    }
                }
            }

            return result;
        }
    }
}

