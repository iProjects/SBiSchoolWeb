//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/14/2015 18:42:21 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// ProgrammeYearCourses data access component. Manages CRUD operations for the ProgrammeYearCourses table.
    /// </summary>
    public partial class ProgrammeYearCourseDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ProgrammeYearCourses table.
        /// </summary>
        /// <param name="programmeYearCourse">A ProgrammeYearCourse object.</param>
        /// <returns>An updated ProgrammeYearCourse object.</returns>
        public ProgrammeYearCourse Create(ProgrammeYearCourse programmeYearCourse)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ProgrammeYearCourses ([ProgrammeId], [ProgrammeYearId], [CourseId], [Semester], [NoOfHrs], [TuitionFees], [ExamFees], [ResitFees], [Status], [IsDeleted]) " +
                "VALUES(@ProgrammeId, @ProgrammeYearId, @CourseId, @Semester, @NoOfHrs, @TuitionFees, @ExamFees, @ResitFees, @Status, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ProgrammeId", DbType.String, programmeYearCourse.ProgrammeId);
                db.AddInParameter(cmd, "@ProgrammeYearId", DbType.Int32, programmeYearCourse.ProgrammeYearId);
                db.AddInParameter(cmd, "@CourseId", DbType.String, programmeYearCourse.CourseId);
                db.AddInParameter(cmd, "@Semester", DbType.Int32, programmeYearCourse.Semester);
                db.AddInParameter(cmd, "@NoOfHrs", DbType.Int32, programmeYearCourse.NoOfHrs);
                db.AddInParameter(cmd, "@TuitionFees", DbType.Currency, programmeYearCourse.TuitionFees);
                db.AddInParameter(cmd, "@ExamFees", DbType.Currency, programmeYearCourse.ExamFees);
                db.AddInParameter(cmd, "@ResitFees", DbType.Currency, programmeYearCourse.ResitFees);
                db.AddInParameter(cmd, "@Status", DbType.String, programmeYearCourse.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, programmeYearCourse.IsDeleted);

                // Get the primary key value.
                programmeYearCourse.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return programmeYearCourse;
        }

        /// <summary>
        /// Updates an existing row in the ProgrammeYearCourses table.
        /// </summary>
        /// <param name="programmeYearCourse">A ProgrammeYearCourse entity object.</param>
        public void UpdateById(ProgrammeYearCourse programmeYearCourse)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ProgrammeYearCourses " +
                "SET " +
                    "[ProgrammeId]=@ProgrammeId, " +
                    "[ProgrammeYearId]=@ProgrammeYearId, " +
                    "[CourseId]=@CourseId, " +
                    "[Semester]=@Semester, " +
                    "[NoOfHrs]=@NoOfHrs, " +
                    "[TuitionFees]=@TuitionFees, " +
                    "[ExamFees]=@ExamFees, " +
                    "[ResitFees]=@ResitFees, " +
                    "[Status]=@Status, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ProgrammeId", DbType.String, programmeYearCourse.ProgrammeId);
                db.AddInParameter(cmd, "@ProgrammeYearId", DbType.Int32, programmeYearCourse.ProgrammeYearId);
                db.AddInParameter(cmd, "@CourseId", DbType.String, programmeYearCourse.CourseId);
                db.AddInParameter(cmd, "@Semester", DbType.Int32, programmeYearCourse.Semester);
                db.AddInParameter(cmd, "@NoOfHrs", DbType.Int32, programmeYearCourse.NoOfHrs);
                db.AddInParameter(cmd, "@TuitionFees", DbType.Currency, programmeYearCourse.TuitionFees);
                db.AddInParameter(cmd, "@ExamFees", DbType.Currency, programmeYearCourse.ExamFees);
                db.AddInParameter(cmd, "@ResitFees", DbType.Currency, programmeYearCourse.ResitFees);
                db.AddInParameter(cmd, "@Status", DbType.String, programmeYearCourse.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, programmeYearCourse.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, programmeYearCourse.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ProgrammeYearCourses table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ProgrammeYearCourses " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ProgrammeYearCourses table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A ProgrammeYearCourse object with data populated from the database.</returns>
        public ProgrammeYearCourse SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ProgrammeId], [ProgrammeYearId], [CourseId], [Semester], [NoOfHrs], [TuitionFees]" +
                        ", [ExamFees], [ResitFees], [Status], [IsDeleted] " +
                "FROM dbo.ProgrammeYearCourses  " +
                "WHERE [Id]=@Id ";

            ProgrammeYearCourse programmeYearCourse = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ProgrammeYearCourse
                        programmeYearCourse = new ProgrammeYearCourse();

                        // Read values.
                        programmeYearCourse.Id = base.GetDataValue<int>(dr, "Id");
                        programmeYearCourse.ProgrammeId = base.GetDataValue<string>(dr, "ProgrammeId");
                        programmeYearCourse.ProgrammeYearId = base.GetDataValue<int>(dr, "ProgrammeYearId");
                        programmeYearCourse.CourseId = base.GetDataValue<string>(dr, "CourseId");
                        programmeYearCourse.Semester = base.GetDataValue<int>(dr, "Semester");
                        programmeYearCourse.NoOfHrs = base.GetDataValue<int>(dr, "NoOfHrs");
                        programmeYearCourse.TuitionFees = base.GetDataValue<decimal>(dr, "TuitionFees");
                        programmeYearCourse.ExamFees = base.GetDataValue<decimal>(dr, "ExamFees");
                        programmeYearCourse.ResitFees = base.GetDataValue<decimal>(dr, "ResitFees");
                        programmeYearCourse.Status = base.GetDataValue<string>(dr, "Status");
                        programmeYearCourse.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return programmeYearCourse;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ProgrammeYearCourses table.
        /// </summary>
        /// <returns>A collection of ProgrammeYearCourse objects.</returns>		
        public List<ProgrammeYearCourse> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ProgrammeId], [ProgrammeYearId], [CourseId], [Semester], [NoOfHrs], [TuitionFees]" +
                        ", [ExamFees], [ResitFees], [Status], [IsDeleted] " +
                "FROM dbo.ProgrammeYearCourses ";

            List<ProgrammeYearCourse> result = new List<ProgrammeYearCourse>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ProgrammeYearCourse
                        ProgrammeYearCourse programmeYearCourse = new ProgrammeYearCourse();

                        // Read values.
                        programmeYearCourse.Id = base.GetDataValue<int>(dr, "Id");
                        programmeYearCourse.ProgrammeId = base.GetDataValue<string>(dr, "ProgrammeId");
                        programmeYearCourse.ProgrammeYearId = base.GetDataValue<int>(dr, "ProgrammeYearId");
                        programmeYearCourse.CourseId = base.GetDataValue<string>(dr, "CourseId");
                        programmeYearCourse.Semester = base.GetDataValue<int>(dr, "Semester");
                        programmeYearCourse.NoOfHrs = base.GetDataValue<int>(dr, "NoOfHrs");
                        programmeYearCourse.TuitionFees = base.GetDataValue<decimal>(dr, "TuitionFees");
                        programmeYearCourse.ExamFees = base.GetDataValue<decimal>(dr, "ExamFees");
                        programmeYearCourse.ResitFees = base.GetDataValue<decimal>(dr, "ResitFees");
                        programmeYearCourse.Status = base.GetDataValue<string>(dr, "Status");
                        programmeYearCourse.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(programmeYearCourse);
                    }
                }
            }

            return result;
        }
    }
}

