//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/14/2015 18:42:21 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// ProgrammeYears data access component. Manages CRUD operations for the ProgrammeYears table.
    /// </summary>
    public partial class ProgrammeYearDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ProgrammeYears table.
        /// </summary>
        /// <param name="programmeYear">A ProgrammeYear object.</param>
        /// <returns>An updated ProgrammeYear object.</returns>
        public ProgrammeYear Create(ProgrammeYear programmeYear)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ProgrammeYears ([ProgrammeId], [Year], [Description], [NextYr], [Fees], [Status], [IsDeleted]) " +
                "VALUES(@ProgrammeId, @Year, @Description, @NextYr, @Fees, @Status, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ProgrammeId", DbType.String, programmeYear.ProgrammeId);
                db.AddInParameter(cmd, "@Year", DbType.Int32, programmeYear.Year);
                db.AddInParameter(cmd, "@Description", DbType.String, programmeYear.Description);
                db.AddInParameter(cmd, "@NextYr", DbType.Int32, programmeYear.NextYr);
                db.AddInParameter(cmd, "@Fees", DbType.Currency, programmeYear.Fees);
                db.AddInParameter(cmd, "@Status", DbType.String, programmeYear.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, programmeYear.IsDeleted);

                // Get the primary key value.
                programmeYear.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return programmeYear;
        }

        /// <summary>
        /// Updates an existing row in the ProgrammeYears table.
        /// </summary>
        /// <param name="programmeYear">A ProgrammeYear entity object.</param>
        public void UpdateById(ProgrammeYear programmeYear)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ProgrammeYears " +
                "SET " +
                    "[ProgrammeId]=@ProgrammeId, " +
                    "[Year]=@Year, " +
                    "[Description]=@Description, " +
                    "[NextYr]=@NextYr, " +
                    "[Fees]=@Fees, " +
                    "[Status]=@Status, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ProgrammeId", DbType.String, programmeYear.ProgrammeId);
                db.AddInParameter(cmd, "@Year", DbType.Int32, programmeYear.Year);
                db.AddInParameter(cmd, "@Description", DbType.String, programmeYear.Description);
                db.AddInParameter(cmd, "@NextYr", DbType.Int32, programmeYear.NextYr);
                db.AddInParameter(cmd, "@Fees", DbType.Currency, programmeYear.Fees);
                db.AddInParameter(cmd, "@Status", DbType.String, programmeYear.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, programmeYear.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, programmeYear.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ProgrammeYears table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ProgrammeYears " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ProgrammeYears table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A ProgrammeYear object with data populated from the database.</returns>
        public ProgrammeYear SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ProgrammeId], [Year], [Description], [NextYr], [Fees], [Status], [IsDeleted]" +
                        " " +
                "FROM dbo.ProgrammeYears  " +
                "WHERE [Id]=@Id ";

            ProgrammeYear programmeYear = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ProgrammeYear
                        programmeYear = new ProgrammeYear();

                        // Read values.
                        programmeYear.Id = base.GetDataValue<int>(dr, "Id");
                        programmeYear.ProgrammeId = base.GetDataValue<string>(dr, "ProgrammeId");
                        programmeYear.Year = base.GetDataValue<int>(dr, "Year");
                        programmeYear.Description = base.GetDataValue<string>(dr, "Description");
                        programmeYear.NextYr = base.GetDataValue<int>(dr, "NextYr");
                        programmeYear.Fees = base.GetDataValue<decimal>(dr, "Fees");
                        programmeYear.Status = base.GetDataValue<string>(dr, "Status");
                        programmeYear.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return programmeYear;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ProgrammeYears table.
        /// </summary>
        /// <returns>A collection of ProgrammeYear objects.</returns>		
        public List<ProgrammeYear> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ProgrammeId], [Year], [Description], [NextYr], [Fees], [Status], [IsDeleted]" +
                        " " +
                "FROM dbo.ProgrammeYears ";

            List<ProgrammeYear> result = new List<ProgrammeYear>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ProgrammeYear
                        ProgrammeYear programmeYear = new ProgrammeYear();

                        // Read values.
                        programmeYear.Id = base.GetDataValue<int>(dr, "Id");
                        programmeYear.ProgrammeId = base.GetDataValue<string>(dr, "ProgrammeId");
                        programmeYear.Year = base.GetDataValue<int>(dr, "Year");
                        programmeYear.Description = base.GetDataValue<string>(dr, "Description");
                        programmeYear.NextYr = base.GetDataValue<int>(dr, "NextYr");
                        programmeYear.Fees = base.GetDataValue<decimal>(dr, "Fees");
                        programmeYear.Status = base.GetDataValue<string>(dr, "Status");
                        programmeYear.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(programmeYear);
                    }
                }
            }

            return result;
        }
    }
}

