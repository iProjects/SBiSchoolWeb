//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Users data access component. Manages CRUD operations for the Users table.
    /// </summary>
    public partial class UserDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Users table.
        /// </summary>
        /// <param name="user">A User object.</param>
        /// <returns>An updated User object.</returns>
        public User Create(User user)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Users ([Name], [FirstName], [LastName], [Email], [PasswordHash], [PasswordSalt], [PasswordQuestion], [PasswordAnswerHash], [PasswordAnswerSalt], [UserType], [ProfileReset], [IsDeleted]) " +
                "VALUES(@Name, @FirstName, @LastName, @Email, @PasswordHash, @PasswordSalt, @PasswordQuestion, @PasswordAnswerHash, @PasswordAnswerSalt, @UserType, @ProfileReset, @IsDeleted);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, user.Name);
                db.AddInParameter(cmd, "@FirstName", DbType.String, user.FirstName);
                db.AddInParameter(cmd, "@LastName", DbType.String, user.LastName);
                db.AddInParameter(cmd, "@Email", DbType.String, user.Email);
                db.AddInParameter(cmd, "@PasswordHash", DbType.String, user.PasswordHash);
                db.AddInParameter(cmd, "@PasswordSalt", DbType.String, user.PasswordSalt);
                db.AddInParameter(cmd, "@PasswordQuestion", DbType.String, user.PasswordQuestion);
                db.AddInParameter(cmd, "@PasswordAnswerHash", DbType.String, user.PasswordAnswerHash);
                db.AddInParameter(cmd, "@PasswordAnswerSalt", DbType.String, user.PasswordAnswerSalt);
                db.AddInParameter(cmd, "@UserType", DbType.AnsiStringFixedLength, user.UserType);
                db.AddInParameter(cmd, "@ProfileReset", DbType.Byte, user.ProfileReset);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, user.IsDeleted);

                db.ExecuteNonQuery(cmd);
            }

            return user;
        }

        /// <summary>
        /// Updates an existing row in the Users table.
        /// </summary>
        /// <param name="user">A User entity object.</param>
        public void UpdateById(User user)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Users " +
                "SET " +
                    "[FirstName]=@FirstName, " +
                    "[LastName]=@LastName, " +
                    "[Email]=@Email, " +
                    "[PasswordHash]=@PasswordHash, " +
                    "[PasswordSalt]=@PasswordSalt, " +
                    "[PasswordQuestion]=@PasswordQuestion, " +
                    "[PasswordAnswerHash]=@PasswordAnswerHash, " +
                    "[PasswordAnswerSalt]=@PasswordAnswerSalt, " +
                    "[UserType]=@UserType, " +
                    "[ProfileReset]=@ProfileReset, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Name]=@Name ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@FirstName", DbType.String, user.FirstName);
                db.AddInParameter(cmd, "@LastName", DbType.String, user.LastName);
                db.AddInParameter(cmd, "@Email", DbType.String, user.Email);
                db.AddInParameter(cmd, "@PasswordHash", DbType.String, user.PasswordHash);
                db.AddInParameter(cmd, "@PasswordSalt", DbType.String, user.PasswordSalt);
                db.AddInParameter(cmd, "@PasswordQuestion", DbType.String, user.PasswordQuestion);
                db.AddInParameter(cmd, "@PasswordAnswerHash", DbType.String, user.PasswordAnswerHash);
                db.AddInParameter(cmd, "@PasswordAnswerSalt", DbType.String, user.PasswordAnswerSalt);
                db.AddInParameter(cmd, "@UserType", DbType.AnsiStringFixedLength, user.UserType);
                db.AddInParameter(cmd, "@ProfileReset", DbType.Byte, user.ProfileReset);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, user.IsDeleted);
                db.AddInParameter(cmd, "@Name", DbType.String, user.Name);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Users table.
        /// </summary>
        /// <param name="name">A name value.</param>
        public void DeleteById(string name)
        {
            const string SQL_STATEMENT = "DELETE dbo.Users " +
                                         "WHERE [Name]=@Name ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, name);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Users table.
        /// </summary>
        /// <param name="name">A Name value.</param>
        /// <returns>A User object with data populated from the database.</returns>
        public User SelectById(string name)
        {
            const string SQL_STATEMENT =
                "SELECT [Name], [FirstName], [LastName], [Email], [PasswordHash], [PasswordSalt], [PasswordQuestion]" +
                        ", [PasswordAnswerHash], [PasswordAnswerSalt], [UserType], [ProfileReset], [IsDeleted]" +
                        " " +
                "FROM dbo.Users  " +
                "WHERE [Name]=@Name ";

            User user = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Name", DbType.String, name);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new User
                        user = new User();

                        // Read values.
                        user.Name = base.GetDataValue<string>(dr, "Name");
                        user.FirstName = base.GetDataValue<string>(dr, "FirstName");
                        user.LastName = base.GetDataValue<string>(dr, "LastName");
                        user.Email = base.GetDataValue<string>(dr, "Email");
                        user.PasswordHash = base.GetDataValue<string>(dr, "PasswordHash");
                        user.PasswordSalt = base.GetDataValue<string>(dr, "PasswordSalt");
                        user.PasswordQuestion = base.GetDataValue<string>(dr, "PasswordQuestion");
                        user.PasswordAnswerHash = base.GetDataValue<string>(dr, "PasswordAnswerHash");
                        user.PasswordAnswerSalt = base.GetDataValue<string>(dr, "PasswordAnswerSalt");
                        user.UserType = Convert.ToChar(base.GetDataValue<string>(dr, "UserType"));
                        user.ProfileReset = base.GetDataValue<byte>(dr, "ProfileReset");
                        user.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return user;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Users table.
        /// </summary>
        /// <returns>A collection of User objects.</returns>		
        public List<User> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Name], [FirstName], [LastName], [Email], [PasswordHash], [PasswordSalt], [PasswordQuestion]" +
                        ", [PasswordAnswerHash], [PasswordAnswerSalt], [UserType], [ProfileReset], [IsDeleted]" +
                        " " +
                "FROM dbo.Users ";

            List<User> result = new List<User>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new User
                        User user = new User();

                        // Read values.
                        user.Name = base.GetDataValue<string>(dr, "Name");
                        user.FirstName = base.GetDataValue<string>(dr, "FirstName");
                        user.LastName = base.GetDataValue<string>(dr, "LastName");
                        user.Email = base.GetDataValue<string>(dr, "Email");
                        user.PasswordHash = base.GetDataValue<string>(dr, "PasswordHash");
                        user.PasswordSalt = base.GetDataValue<string>(dr, "PasswordSalt");
                        user.PasswordQuestion = base.GetDataValue<string>(dr, "PasswordQuestion");
                        user.PasswordAnswerHash = base.GetDataValue<string>(dr, "PasswordAnswerHash");
                        user.PasswordAnswerSalt = base.GetDataValue<string>(dr, "PasswordAnswerSalt");
                        user.UserType = Convert.ToChar(base.GetDataValue<string>(dr, "UserType"));
                        user.ProfileReset = base.GetDataValue<byte>(dr, "ProfileReset");
                        user.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(user);
                    }
                }
            }

            return result;
        }
    }
}

