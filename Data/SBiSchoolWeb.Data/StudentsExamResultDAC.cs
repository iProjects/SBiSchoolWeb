//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// StudentsExamResults data access component. Manages CRUD operations for the StudentsExamResults table.
    /// </summary>
    public partial class StudentsExamResultDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the StudentsExamResults table.
        /// </summary>
        /// <param name="studentsExamResult">A StudentsExamResult object.</param>
        /// <returns>An updated StudentsExamResult object.</returns>
        public StudentsExamResult Create(StudentsExamResult studentsExamResult)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.StudentsExamResults ([StudentId], [Examid], [SchoolClassId], [TeacherId], [TotalMarks_Target], [TotalPoints_Target], [Position_Target], [MeanMarks_Target], [MeanGrade_Target], [TotalMarks], [TotalPoints], [Position], [MeanMarks], [MeanGrade], [ClassTeacherRemark], [HeadTeacherRemark], [Status], [IsDeleted]) " +
                "VALUES(@StudentId, @Examid, @SchoolClassId, @TeacherId, @TotalMarks_Target, @TotalPoints_Target, @Position_Target, @MeanMarks_Target, @MeanGrade_Target, @TotalMarks, @TotalPoints, @Position, @MeanMarks, @MeanGrade, @ClassTeacherRemark, @HeadTeacherRemark, @Status, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@StudentId", DbType.Int32, studentsExamResult.StudentId);
                db.AddInParameter(cmd, "@Examid", DbType.Int32, studentsExamResult.Examid);
                db.AddInParameter(cmd, "@SchoolClassId", DbType.Int32, studentsExamResult.SchoolClassId);
                db.AddInParameter(cmd, "@TeacherId", DbType.Int32, studentsExamResult.TeacherId);
                db.AddInParameter(cmd, "@TotalMarks_Target", DbType.Double, studentsExamResult.TotalMarks_Target);
                db.AddInParameter(cmd, "@TotalPoints_Target", DbType.Double, studentsExamResult.TotalPoints_Target);
                db.AddInParameter(cmd, "@Position_Target", DbType.Int32, studentsExamResult.Position_Target);
                db.AddInParameter(cmd, "@MeanMarks_Target", DbType.Double, studentsExamResult.MeanMarks_Target);
                db.AddInParameter(cmd, "@MeanGrade_Target", DbType.String, studentsExamResult.MeanGrade_Target);
                db.AddInParameter(cmd, "@TotalMarks", DbType.Double, studentsExamResult.TotalMarks);
                db.AddInParameter(cmd, "@TotalPoints", DbType.Double, studentsExamResult.TotalPoints);
                db.AddInParameter(cmd, "@Position", DbType.Int32, studentsExamResult.Position);
                db.AddInParameter(cmd, "@MeanMarks", DbType.Double, studentsExamResult.MeanMarks);
                db.AddInParameter(cmd, "@MeanGrade", DbType.String, studentsExamResult.MeanGrade);
                db.AddInParameter(cmd, "@ClassTeacherRemark", DbType.String, studentsExamResult.ClassTeacherRemark);
                db.AddInParameter(cmd, "@HeadTeacherRemark", DbType.String, studentsExamResult.HeadTeacherRemark);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, studentsExamResult.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, studentsExamResult.IsDeleted);

                // Get the primary key value.
                studentsExamResult.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return studentsExamResult;
        }

        /// <summary>
        /// Updates an existing row in the StudentsExamResults table.
        /// </summary>
        /// <param name="studentsExamResult">A StudentsExamResult entity object.</param>
        public void UpdateById(StudentsExamResult studentsExamResult)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.StudentsExamResults " +
                "SET " +
                    "[StudentId]=@StudentId, " +
                    "[Examid]=@Examid, " +
                    "[SchoolClassId]=@SchoolClassId, " +
                    "[TeacherId]=@TeacherId, " +
                    "[TotalMarks_Target]=@TotalMarks_Target, " +
                    "[TotalPoints_Target]=@TotalPoints_Target, " +
                    "[Position_Target]=@Position_Target, " +
                    "[MeanMarks_Target]=@MeanMarks_Target, " +
                    "[MeanGrade_Target]=@MeanGrade_Target, " +
                    "[TotalMarks]=@TotalMarks, " +
                    "[TotalPoints]=@TotalPoints, " +
                    "[Position]=@Position, " +
                    "[MeanMarks]=@MeanMarks, " +
                    "[MeanGrade]=@MeanGrade, " +
                    "[ClassTeacherRemark]=@ClassTeacherRemark, " +
                    "[HeadTeacherRemark]=@HeadTeacherRemark, " +
                    "[Status]=@Status, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@StudentId", DbType.Int32, studentsExamResult.StudentId);
                db.AddInParameter(cmd, "@Examid", DbType.Int32, studentsExamResult.Examid);
                db.AddInParameter(cmd, "@SchoolClassId", DbType.Int32, studentsExamResult.SchoolClassId);
                db.AddInParameter(cmd, "@TeacherId", DbType.Int32, studentsExamResult.TeacherId);
                db.AddInParameter(cmd, "@TotalMarks_Target", DbType.Double, studentsExamResult.TotalMarks_Target);
                db.AddInParameter(cmd, "@TotalPoints_Target", DbType.Double, studentsExamResult.TotalPoints_Target);
                db.AddInParameter(cmd, "@Position_Target", DbType.Int32, studentsExamResult.Position_Target);
                db.AddInParameter(cmd, "@MeanMarks_Target", DbType.Double, studentsExamResult.MeanMarks_Target);
                db.AddInParameter(cmd, "@MeanGrade_Target", DbType.String, studentsExamResult.MeanGrade_Target);
                db.AddInParameter(cmd, "@TotalMarks", DbType.Double, studentsExamResult.TotalMarks);
                db.AddInParameter(cmd, "@TotalPoints", DbType.Double, studentsExamResult.TotalPoints);
                db.AddInParameter(cmd, "@Position", DbType.Int32, studentsExamResult.Position);
                db.AddInParameter(cmd, "@MeanMarks", DbType.Double, studentsExamResult.MeanMarks);
                db.AddInParameter(cmd, "@MeanGrade", DbType.String, studentsExamResult.MeanGrade);
                db.AddInParameter(cmd, "@ClassTeacherRemark", DbType.String, studentsExamResult.ClassTeacherRemark);
                db.AddInParameter(cmd, "@HeadTeacherRemark", DbType.String, studentsExamResult.HeadTeacherRemark);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, studentsExamResult.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, studentsExamResult.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, studentsExamResult.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the StudentsExamResults table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.StudentsExamResults " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the StudentsExamResults table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A StudentsExamResult object with data populated from the database.</returns>
        public StudentsExamResult SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [StudentId], [Examid], [SchoolClassId], [TeacherId], [TotalMarks_Target], [TotalPoints_Target]" +
                        ", [Position_Target], [MeanMarks_Target], [MeanGrade_Target], [TotalMarks], [TotalPoints]" +
                        ", [Position], [MeanMarks], [MeanGrade], [ClassTeacherRemark], [HeadTeacherRemark]" +
                        ", [Status], [IsDeleted] " +
                "FROM dbo.StudentsExamResults  " +
                "WHERE [Id]=@Id ";

            StudentsExamResult studentsExamResult = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new StudentsExamResult
                        studentsExamResult = new StudentsExamResult();

                        // Read values.
                        studentsExamResult.Id = base.GetDataValue<int>(dr, "Id");
                        studentsExamResult.StudentId = base.GetDataValue<int>(dr, "StudentId");
                        studentsExamResult.Examid = base.GetDataValue<int>(dr, "Examid");
                        studentsExamResult.SchoolClassId = base.GetDataValue<int>(dr, "SchoolClassId");
                        studentsExamResult.TeacherId = base.GetDataValue<int>(dr, "TeacherId");
                        studentsExamResult.TotalMarks_Target = base.GetDataValue<double>(dr, "TotalMarks_Target");
                        studentsExamResult.TotalPoints_Target = base.GetDataValue<double>(dr, "TotalPoints_Target");
                        studentsExamResult.Position_Target = base.GetDataValue<int>(dr, "Position_Target");
                        studentsExamResult.MeanMarks_Target = base.GetDataValue<double>(dr, "MeanMarks_Target");
                        studentsExamResult.MeanGrade_Target = base.GetDataValue<string>(dr, "MeanGrade_Target");
                        studentsExamResult.TotalMarks = base.GetDataValue<double>(dr, "TotalMarks");
                        studentsExamResult.TotalPoints = base.GetDataValue<double>(dr, "TotalPoints");
                        studentsExamResult.Position = base.GetDataValue<int>(dr, "Position");
                        studentsExamResult.MeanMarks = base.GetDataValue<double>(dr, "MeanMarks");
                        studentsExamResult.MeanGrade = base.GetDataValue<string>(dr, "MeanGrade");
                        studentsExamResult.ClassTeacherRemark = base.GetDataValue<string>(dr, "ClassTeacherRemark");
                        studentsExamResult.HeadTeacherRemark = base.GetDataValue<string>(dr, "HeadTeacherRemark");
                        studentsExamResult.Status = base.GetDataValue<string>(dr, "Status");
                        studentsExamResult.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return studentsExamResult;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the StudentsExamResults table.
        /// </summary>
        /// <returns>A collection of StudentsExamResult objects.</returns>		
        public List<StudentsExamResult> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [StudentId], [Examid], [SchoolClassId], [TeacherId], [TotalMarks_Target], [TotalPoints_Target]" +
                        ", [Position_Target], [MeanMarks_Target], [MeanGrade_Target], [TotalMarks], [TotalPoints]" +
                        ", [Position], [MeanMarks], [MeanGrade], [ClassTeacherRemark], [HeadTeacherRemark]" +
                        ", [Status], [IsDeleted] " +
                "FROM dbo.StudentsExamResults ";

            List<StudentsExamResult> result = new List<StudentsExamResult>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new StudentsExamResult
                        StudentsExamResult studentsExamResult = new StudentsExamResult();

                        // Read values.
                        studentsExamResult.Id = base.GetDataValue<int>(dr, "Id");
                        studentsExamResult.StudentId = base.GetDataValue<int>(dr, "StudentId");
                        studentsExamResult.Examid = base.GetDataValue<int>(dr, "Examid");
                        studentsExamResult.SchoolClassId = base.GetDataValue<int>(dr, "SchoolClassId");
                        studentsExamResult.TeacherId = base.GetDataValue<int>(dr, "TeacherId");
                        studentsExamResult.TotalMarks_Target = base.GetDataValue<double>(dr, "TotalMarks_Target");
                        studentsExamResult.TotalPoints_Target = base.GetDataValue<double>(dr, "TotalPoints_Target");
                        studentsExamResult.Position_Target = base.GetDataValue<int>(dr, "Position_Target");
                        studentsExamResult.MeanMarks_Target = base.GetDataValue<double>(dr, "MeanMarks_Target");
                        studentsExamResult.MeanGrade_Target = base.GetDataValue<string>(dr, "MeanGrade_Target");
                        studentsExamResult.TotalMarks = base.GetDataValue<double>(dr, "TotalMarks");
                        studentsExamResult.TotalPoints = base.GetDataValue<double>(dr, "TotalPoints");
                        studentsExamResult.Position = base.GetDataValue<int>(dr, "Position");
                        studentsExamResult.MeanMarks = base.GetDataValue<double>(dr, "MeanMarks");
                        studentsExamResult.MeanGrade = base.GetDataValue<string>(dr, "MeanGrade");
                        studentsExamResult.ClassTeacherRemark = base.GetDataValue<string>(dr, "ClassTeacherRemark");
                        studentsExamResult.HeadTeacherRemark = base.GetDataValue<string>(dr, "HeadTeacherRemark");
                        studentsExamResult.Status = base.GetDataValue<string>(dr, "Status");
                        studentsExamResult.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(studentsExamResult);
                    }
                }
            }

            return result;
        }
    }
}

