//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// PL_Level2 data access component. Manages CRUD operations for the PL_Level2 table.
    /// </summary>
    public partial class PL_Level2DAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the PL_Level2 table.
        /// </summary>
        /// <param name="pL_Level2">A PL_Level2 object.</param>
        /// <returns>An updated PL_Level2 object.</returns>
        public PL_Level2 Create(PL_Level2 pL_Level2)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.PL_Level2 ([ParentId], [Description], [AccField], [PLCriteria], [Yr1Amount], [Yr2Amount], [ROrder], [IsDeleted]) " +
                "VALUES(@ParentId, @Description, @AccField, @PLCriteria, @Yr1Amount, @Yr2Amount, @ROrder, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, pL_Level2.ParentId);
                db.AddInParameter(cmd, "@Description", DbType.String, pL_Level2.Description);
                db.AddInParameter(cmd, "@AccField", DbType.String, pL_Level2.AccField);
                db.AddInParameter(cmd, "@PLCriteria", DbType.String, pL_Level2.PLCriteria);
                db.AddInParameter(cmd, "@Yr1Amount", DbType.Currency, pL_Level2.Yr1Amount);
                db.AddInParameter(cmd, "@Yr2Amount", DbType.Currency, pL_Level2.Yr2Amount);
                db.AddInParameter(cmd, "@ROrder", DbType.Int32, pL_Level2.ROrder);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, pL_Level2.IsDeleted);

                // Get the primary key value.
                pL_Level2.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return pL_Level2;
        }

        /// <summary>
        /// Updates an existing row in the PL_Level2 table.
        /// </summary>
        /// <param name="pL_Level2">A PL_Level2 entity object.</param>
        public void UpdateById(PL_Level2 pL_Level2)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.PL_Level2 " +
                "SET " +
                    "[ParentId]=@ParentId, " +
                    "[Description]=@Description, " +
                    "[AccField]=@AccField, " +
                    "[PLCriteria]=@PLCriteria, " +
                    "[Yr1Amount]=@Yr1Amount, " +
                    "[Yr2Amount]=@Yr2Amount, " +
                    "[ROrder]=@ROrder, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentId", DbType.Int32, pL_Level2.ParentId);
                db.AddInParameter(cmd, "@Description", DbType.String, pL_Level2.Description);
                db.AddInParameter(cmd, "@AccField", DbType.String, pL_Level2.AccField);
                db.AddInParameter(cmd, "@PLCriteria", DbType.String, pL_Level2.PLCriteria);
                db.AddInParameter(cmd, "@Yr1Amount", DbType.Currency, pL_Level2.Yr1Amount);
                db.AddInParameter(cmd, "@Yr2Amount", DbType.Currency, pL_Level2.Yr2Amount);
                db.AddInParameter(cmd, "@ROrder", DbType.Int32, pL_Level2.ROrder);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, pL_Level2.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, pL_Level2.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the PL_Level2 table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.PL_Level2 " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the PL_Level2 table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A PL_Level2 object with data populated from the database.</returns>
        public PL_Level2 SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ParentId], [Description], [AccField], [PLCriteria], [Yr1Amount], [Yr2Amount]" +
                        ", [ROrder], [IsDeleted] " +
                "FROM dbo.PL_Level2  " +
                "WHERE [Id]=@Id ";

            PL_Level2 pL_Level2 = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new PL_Level2
                        pL_Level2 = new PL_Level2();

                        // Read values.
                        pL_Level2.Id = base.GetDataValue<int>(dr, "Id");
                        pL_Level2.ParentId = base.GetDataValue<int>(dr, "ParentId");
                        pL_Level2.Description = base.GetDataValue<string>(dr, "Description");
                        pL_Level2.AccField = base.GetDataValue<string>(dr, "AccField");
                        pL_Level2.PLCriteria = base.GetDataValue<string>(dr, "PLCriteria");
                        pL_Level2.Yr1Amount = base.GetDataValue<decimal>(dr, "Yr1Amount");
                        pL_Level2.Yr2Amount = base.GetDataValue<decimal>(dr, "Yr2Amount");
                        pL_Level2.ROrder = base.GetDataValue<int>(dr, "ROrder");
                        pL_Level2.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return pL_Level2;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the PL_Level2 table.
        /// </summary>
        /// <returns>A collection of PL_Level2 objects.</returns>		
        public List<PL_Level2> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ParentId], [Description], [AccField], [PLCriteria], [Yr1Amount], [Yr2Amount]" +
                        ", [ROrder], [IsDeleted] " +
                "FROM dbo.PL_Level2 ";

            List<PL_Level2> result = new List<PL_Level2>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new PL_Level2
                        PL_Level2 pL_Level2 = new PL_Level2();

                        // Read values.
                        pL_Level2.Id = base.GetDataValue<int>(dr, "Id");
                        pL_Level2.ParentId = base.GetDataValue<int>(dr, "ParentId");
                        pL_Level2.Description = base.GetDataValue<string>(dr, "Description");
                        pL_Level2.AccField = base.GetDataValue<string>(dr, "AccField");
                        pL_Level2.PLCriteria = base.GetDataValue<string>(dr, "PLCriteria");
                        pL_Level2.Yr1Amount = base.GetDataValue<decimal>(dr, "Yr1Amount");
                        pL_Level2.Yr2Amount = base.GetDataValue<decimal>(dr, "Yr2Amount");
                        pL_Level2.ROrder = base.GetDataValue<int>(dr, "ROrder");
                        pL_Level2.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(pL_Level2);
                    }
                }
            }

            return result;
        }
    }
}

