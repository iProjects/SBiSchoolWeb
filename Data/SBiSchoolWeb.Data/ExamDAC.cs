//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Exam data access component. Manages CRUD operations for the Exam table.
    /// </summary>
    public partial class ExamDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Exam table.
        /// </summary>
        /// <param name="exam">A Exam object.</param>
        /// <returns>An updated Exam object.</returns>
        public Exam Create(Exam exam)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Exam ([ExamPeriodId], [ClassId], [SubjectShortCode], [LastModified], [ModifiedBy], [Enabled], [Closed], [Processed], [IsDeleted]) " +
                "VALUES(@ExamPeriodId, @ClassId, @SubjectShortCode, @LastModified, @ModifiedBy, @Enabled, @Closed, @Processed, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ExamPeriodId", DbType.Int32, exam.ExamPeriodId);
                db.AddInParameter(cmd, "@ClassId", DbType.Int32, exam.ClassId);
                db.AddInParameter(cmd, "@SubjectShortCode", DbType.String, exam.SubjectShortCode);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime, exam.LastModified);
                db.AddInParameter(cmd, "@ModifiedBy", DbType.String, exam.ModifiedBy);
                db.AddInParameter(cmd, "@Enabled", DbType.Boolean, exam.Enabled);
                db.AddInParameter(cmd, "@Closed", DbType.Boolean, exam.Closed);
                db.AddInParameter(cmd, "@Processed", DbType.Boolean, exam.Processed);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, exam.IsDeleted);

                // Get the primary key value.
                exam.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return exam;
        }

        /// <summary>
        /// Updates an existing row in the Exam table.
        /// </summary>
        /// <param name="exam">A Exam entity object.</param>
        public void UpdateById(Exam exam)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Exam " +
                "SET " +
                    "[ExamPeriodId]=@ExamPeriodId, " +
                    "[ClassId]=@ClassId, " +
                    "[SubjectShortCode]=@SubjectShortCode, " +
                    "[LastModified]=@LastModified, " +
                    "[ModifiedBy]=@ModifiedBy, " +
                    "[Enabled]=@Enabled, " +
                    "[Closed]=@Closed, " +
                    "[Processed]=@Processed, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ExamPeriodId", DbType.Int32, exam.ExamPeriodId);
                db.AddInParameter(cmd, "@ClassId", DbType.Int32, exam.ClassId);
                db.AddInParameter(cmd, "@SubjectShortCode", DbType.String, exam.SubjectShortCode);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime, exam.LastModified);
                db.AddInParameter(cmd, "@ModifiedBy", DbType.String, exam.ModifiedBy);
                db.AddInParameter(cmd, "@Enabled", DbType.Boolean, exam.Enabled);
                db.AddInParameter(cmd, "@Closed", DbType.Boolean, exam.Closed);
                db.AddInParameter(cmd, "@Processed", DbType.Boolean, exam.Processed);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, exam.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, exam.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Exam table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Exam " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Exam table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Exam object with data populated from the database.</returns>
        public Exam SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ExamPeriodId], [ClassId], [SubjectShortCode], [LastModified], [ModifiedBy]" +
                        ", [Enabled], [Closed], [Processed], [IsDeleted] " +
                "FROM dbo.Exam  " +
                "WHERE [Id]=@Id ";

            Exam exam = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Exam
                        exam = new Exam();

                        // Read values.
                        exam.Id = base.GetDataValue<int>(dr, "Id");
                        exam.ExamPeriodId = base.GetDataValue<int>(dr, "ExamPeriodId");
                        exam.ClassId = base.GetDataValue<int>(dr, "ClassId");
                        exam.SubjectShortCode = base.GetDataValue<string>(dr, "SubjectShortCode");
                        exam.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                        exam.ModifiedBy = base.GetDataValue<string>(dr, "ModifiedBy");
                        exam.Enabled = base.GetDataValue<bool>(dr, "Enabled");
                        exam.Closed = base.GetDataValue<bool>(dr, "Closed");
                        exam.Processed = base.GetDataValue<bool>(dr, "Processed");
                        exam.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return exam;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Exam table.
        /// </summary>
        /// <returns>A collection of Exam objects.</returns>		
        public List<Exam> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ExamPeriodId], [ClassId], [SubjectShortCode], [LastModified], [ModifiedBy]" +
                        ", [Enabled], [Closed], [Processed], [IsDeleted] " +
                "FROM dbo.Exam ";

            List<Exam> result = new List<Exam>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Exam
                        Exam exam = new Exam();

                        // Read values.
                        exam.Id = base.GetDataValue<int>(dr, "Id");
                        exam.ExamPeriodId = base.GetDataValue<int>(dr, "ExamPeriodId");
                        exam.ClassId = base.GetDataValue<int>(dr, "ClassId");
                        exam.SubjectShortCode = base.GetDataValue<string>(dr, "SubjectShortCode");
                        exam.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                        exam.ModifiedBy = base.GetDataValue<string>(dr, "ModifiedBy");
                        exam.Enabled = base.GetDataValue<bool>(dr, "Enabled");
                        exam.Closed = base.GetDataValue<bool>(dr, "Closed");
                        exam.Processed = base.GetDataValue<bool>(dr, "Processed");
                        exam.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(exam);
                    }
                }
            }

            return result;
        }
    }
}

