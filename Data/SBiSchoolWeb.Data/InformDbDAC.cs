//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// InformDb data access component. Manages CRUD operations for the InformDb table.
    /// </summary>
    public partial class InformDbDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the InformDb table.
        /// </summary>
        /// <param name="informDb">A InformDb object.</param>
        /// <returns>An updated InformDb object.</returns>
        public InformDb Create(InformDb informDb)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.InformDb ([AddressTo], [Status], [Body], [MessageType], [AddressFrom], [MessageDate], [Subject]) " +
                "VALUES(@AddressTo, @Status, @Body, @MessageType, @AddressFrom, @MessageDate, @Subject); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@AddressTo", DbType.String, informDb.AddressTo);
                db.AddInParameter(cmd, "@Status", DbType.String, informDb.Status);
                db.AddInParameter(cmd, "@Body", DbType.String, informDb.Body);
                db.AddInParameter(cmd, "@MessageType", DbType.String, informDb.MessageType);
                db.AddInParameter(cmd, "@AddressFrom", DbType.String, informDb.AddressFrom);
                db.AddInParameter(cmd, "@MessageDate", DbType.DateTime2, informDb.MessageDate);
                db.AddInParameter(cmd, "@Subject", DbType.String, informDb.Subject);

                // Get the primary key value.
                informDb.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return informDb;
        }

        /// <summary>
        /// Updates an existing row in the InformDb table.
        /// </summary>
        /// <param name="informDb">A InformDb entity object.</param>
        public void UpdateById(InformDb informDb)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.InformDb " +
                "SET " +
                    "[AddressTo]=@AddressTo, " +
                    "[Status]=@Status, " +
                    "[Body]=@Body, " +
                    "[MessageType]=@MessageType, " +
                    "[AddressFrom]=@AddressFrom, " +
                    "[MessageDate]=@MessageDate, " +
                    "[Subject]=@Subject " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@AddressTo", DbType.String, informDb.AddressTo);
                db.AddInParameter(cmd, "@Status", DbType.String, informDb.Status);
                db.AddInParameter(cmd, "@Body", DbType.String, informDb.Body);
                db.AddInParameter(cmd, "@MessageType", DbType.String, informDb.MessageType);
                db.AddInParameter(cmd, "@AddressFrom", DbType.String, informDb.AddressFrom);
                db.AddInParameter(cmd, "@MessageDate", DbType.DateTime2, informDb.MessageDate);
                db.AddInParameter(cmd, "@Subject", DbType.String, informDb.Subject);
                db.AddInParameter(cmd, "@Id", DbType.Int32, informDb.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the InformDb table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.InformDb " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the InformDb table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A InformDb object with data populated from the database.</returns>
        public InformDb SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [AddressTo], [Status], [Body], [MessageType], [AddressFrom], [MessageDate]" +
                        ", [Subject] " +
                "FROM dbo.InformDb  " +
                "WHERE [Id]=@Id ";

            InformDb informDb = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new InformDb
                        informDb = new InformDb();

                        // Read values.
                        informDb.Id = base.GetDataValue<int>(dr, "Id");
                        informDb.AddressTo = base.GetDataValue<string>(dr, "AddressTo");
                        informDb.Status = base.GetDataValue<string>(dr, "Status");
                        informDb.Body = base.GetDataValue<string>(dr, "Body");
                        informDb.MessageType = base.GetDataValue<string>(dr, "MessageType");
                        informDb.AddressFrom = base.GetDataValue<string>(dr, "AddressFrom");
                        informDb.MessageDate = base.GetDataValue<DateTime>(dr, "MessageDate");
                        informDb.Subject = base.GetDataValue<string>(dr, "Subject");
                    }
                }
            }

            return informDb;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the InformDb table.
        /// </summary>
        /// <returns>A collection of InformDb objects.</returns>		
        public List<InformDb> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [AddressTo], [Status], [Body], [MessageType], [AddressFrom], [MessageDate]" +
                        ", [Subject] " +
                "FROM dbo.InformDb ";

            List<InformDb> result = new List<InformDb>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new InformDb
                        InformDb informDb = new InformDb();

                        // Read values.
                        informDb.Id = base.GetDataValue<int>(dr, "Id");
                        informDb.AddressTo = base.GetDataValue<string>(dr, "AddressTo");
                        informDb.Status = base.GetDataValue<string>(dr, "Status");
                        informDb.Body = base.GetDataValue<string>(dr, "Body");
                        informDb.MessageType = base.GetDataValue<string>(dr, "MessageType");
                        informDb.AddressFrom = base.GetDataValue<string>(dr, "AddressFrom");
                        informDb.MessageDate = base.GetDataValue<DateTime>(dr, "MessageDate");
                        informDb.Subject = base.GetDataValue<string>(dr, "Subject");

                        // Add to List.
                        result.Add(informDb);
                    }
                }
            }

            return result;
        }
    }
}

