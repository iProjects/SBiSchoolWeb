//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// TransactionTypes data access component. Manages CRUD operations for the TransactionTypes table.
    /// </summary>
    public partial class TransactionTypeDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TransactionTypes table.
        /// </summary>
        /// <param name="transactionType">A TransactionType object.</param>
        /// <returns>An updated TransactionType object.</returns>
        public TransactionType Create(TransactionType transactionType)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TransactionTypes ([ShortCode], [Description], [DebitCredit], [TxnTypeView], [CommissionType], [FlatRate], [PercentageRate], [DialogFlag], [UseDefaultAmount], [DefaultAmount], [UseDefaultCreditAccount], [DefaultCreditAccount], [UseDefaultDebitAccount], [DefaultDebitAccount], [UseDefaultCreditNarrative], [DefaultCreditNarrative], [UseDefaultDebitNarrative], [DefaultDebitNarrative], [ScreenViewCreditAccountField], [ScreenViewCreditNarrativeField], [ScreenViewDebitAccountField], [ScreenViewDebitNarrativeField], [ScreenViewAmountField], [ScreenViewModeofPaymentField], [ScreenViewValueDateField], [PrintReceipt], [ReceiptLayout], [PrintReceiptPrompt], [ForcePost], [NarrativeFlag], [StatementFlag], [ValueDays], [Status], [IsDeleted]) " +
                "VALUES(@ShortCode, @Description, @DebitCredit, @TxnTypeView, @CommissionType, @FlatRate, @PercentageRate, @DialogFlag, @UseDefaultAmount, @DefaultAmount, @UseDefaultCreditAccount, @DefaultCreditAccount, @UseDefaultDebitAccount, @DefaultDebitAccount, @UseDefaultCreditNarrative, @DefaultCreditNarrative, @UseDefaultDebitNarrative, @DefaultDebitNarrative, @ScreenViewCreditAccountField, @ScreenViewCreditNarrativeField, @ScreenViewDebitAccountField, @ScreenViewDebitNarrativeField, @ScreenViewAmountField, @ScreenViewModeofPaymentField, @ScreenViewValueDateField, @PrintReceipt, @ReceiptLayout, @PrintReceiptPrompt, @ForcePost, @NarrativeFlag, @StatementFlag, @ValueDays, @Status, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ShortCode", DbType.String, transactionType.ShortCode);
                db.AddInParameter(cmd, "@Description", DbType.String, transactionType.Description);
                db.AddInParameter(cmd, "@DebitCredit", DbType.StringFixedLength, transactionType.DebitCredit);
                db.AddInParameter(cmd, "@TxnTypeView", DbType.StringFixedLength, transactionType.TxnTypeView);
                db.AddInParameter(cmd, "@CommissionType", DbType.StringFixedLength, transactionType.CommissionType);
                db.AddInParameter(cmd, "@FlatRate", DbType.Currency, transactionType.FlatRate);
                db.AddInParameter(cmd, "@PercentageRate", DbType.Double, transactionType.PercentageRate);
                db.AddInParameter(cmd, "@DialogFlag", DbType.StringFixedLength, transactionType.DialogFlag);
                db.AddInParameter(cmd, "@UseDefaultAmount", DbType.Boolean, transactionType.UseDefaultAmount);
                db.AddInParameter(cmd, "@DefaultAmount", DbType.Currency, transactionType.DefaultAmount);
                db.AddInParameter(cmd, "@UseDefaultCreditAccount", DbType.Boolean, transactionType.UseDefaultCreditAccount);
                db.AddInParameter(cmd, "@DefaultCreditAccount", DbType.Int32, transactionType.DefaultCreditAccount);
                db.AddInParameter(cmd, "@UseDefaultDebitAccount", DbType.Boolean, transactionType.UseDefaultDebitAccount);
                db.AddInParameter(cmd, "@DefaultDebitAccount", DbType.Int32, transactionType.DefaultDebitAccount);
                db.AddInParameter(cmd, "@UseDefaultCreditNarrative", DbType.Boolean, transactionType.UseDefaultCreditNarrative);
                db.AddInParameter(cmd, "@DefaultCreditNarrative", DbType.String, transactionType.DefaultCreditNarrative);
                db.AddInParameter(cmd, "@UseDefaultDebitNarrative", DbType.Boolean, transactionType.UseDefaultDebitNarrative);
                db.AddInParameter(cmd, "@DefaultDebitNarrative", DbType.String, transactionType.DefaultDebitNarrative);
                db.AddInParameter(cmd, "@ScreenViewCreditAccountField", DbType.StringFixedLength, transactionType.ScreenViewCreditAccountField);
                db.AddInParameter(cmd, "@ScreenViewCreditNarrativeField", DbType.StringFixedLength, transactionType.ScreenViewCreditNarrativeField);
                db.AddInParameter(cmd, "@ScreenViewDebitAccountField", DbType.StringFixedLength, transactionType.ScreenViewDebitAccountField);
                db.AddInParameter(cmd, "@ScreenViewDebitNarrativeField", DbType.StringFixedLength, transactionType.ScreenViewDebitNarrativeField);
                db.AddInParameter(cmd, "@ScreenViewAmountField", DbType.StringFixedLength, transactionType.ScreenViewAmountField);
                db.AddInParameter(cmd, "@ScreenViewModeofPaymentField", DbType.StringFixedLength, transactionType.ScreenViewModeofPaymentField);
                db.AddInParameter(cmd, "@ScreenViewValueDateField", DbType.StringFixedLength, transactionType.ScreenViewValueDateField);
                db.AddInParameter(cmd, "@PrintReceipt", DbType.Boolean, transactionType.PrintReceipt);
                db.AddInParameter(cmd, "@ReceiptLayout", DbType.String, transactionType.ReceiptLayout);
                db.AddInParameter(cmd, "@PrintReceiptPrompt", DbType.Boolean, transactionType.PrintReceiptPrompt);
                db.AddInParameter(cmd, "@ForcePost", DbType.StringFixedLength, transactionType.ForcePost);
                db.AddInParameter(cmd, "@NarrativeFlag", DbType.StringFixedLength, transactionType.NarrativeFlag);
                db.AddInParameter(cmd, "@StatementFlag", DbType.StringFixedLength, transactionType.StatementFlag);
                db.AddInParameter(cmd, "@ValueDays", DbType.Int32, transactionType.ValueDays);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, transactionType.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, transactionType.IsDeleted);

                // Get the primary key value.
                transactionType.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return transactionType;
        }

        /// <summary>
        /// Updates an existing row in the TransactionTypes table.
        /// </summary>
        /// <param name="transactionType">A TransactionType entity object.</param>
        public void UpdateById(TransactionType transactionType)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TransactionTypes " +
                "SET " +
                    "[ShortCode]=@ShortCode, " +
                    "[Description]=@Description, " +
                    "[DebitCredit]=@DebitCredit, " +
                    "[TxnTypeView]=@TxnTypeView, " +
                    "[CommissionType]=@CommissionType, " +
                    "[FlatRate]=@FlatRate, " +
                    "[PercentageRate]=@PercentageRate, " +
                    "[DialogFlag]=@DialogFlag, " +
                    "[UseDefaultAmount]=@UseDefaultAmount, " +
                    "[DefaultAmount]=@DefaultAmount, " +
                    "[UseDefaultCreditAccount]=@UseDefaultCreditAccount, " +
                    "[DefaultCreditAccount]=@DefaultCreditAccount, " +
                    "[UseDefaultDebitAccount]=@UseDefaultDebitAccount, " +
                    "[DefaultDebitAccount]=@DefaultDebitAccount, " +
                    "[UseDefaultCreditNarrative]=@UseDefaultCreditNarrative, " +
                    "[DefaultCreditNarrative]=@DefaultCreditNarrative, " +
                    "[UseDefaultDebitNarrative]=@UseDefaultDebitNarrative, " +
                    "[DefaultDebitNarrative]=@DefaultDebitNarrative, " +
                    "[ScreenViewCreditAccountField]=@ScreenViewCreditAccountField, " +
                    "[ScreenViewCreditNarrativeField]=@ScreenViewCreditNarrativeField, " +
                    "[ScreenViewDebitAccountField]=@ScreenViewDebitAccountField, " +
                    "[ScreenViewDebitNarrativeField]=@ScreenViewDebitNarrativeField, " +
                    "[ScreenViewAmountField]=@ScreenViewAmountField, " +
                    "[ScreenViewModeofPaymentField]=@ScreenViewModeofPaymentField, " +
                    "[ScreenViewValueDateField]=@ScreenViewValueDateField, " +
                    "[PrintReceipt]=@PrintReceipt, " +
                    "[ReceiptLayout]=@ReceiptLayout, " +
                    "[PrintReceiptPrompt]=@PrintReceiptPrompt, " +
                    "[ForcePost]=@ForcePost, " +
                    "[NarrativeFlag]=@NarrativeFlag, " +
                    "[StatementFlag]=@StatementFlag, " +
                    "[ValueDays]=@ValueDays, " +
                    "[Status]=@Status, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ShortCode", DbType.String, transactionType.ShortCode);
                db.AddInParameter(cmd, "@Description", DbType.String, transactionType.Description);
                db.AddInParameter(cmd, "@DebitCredit", DbType.StringFixedLength, transactionType.DebitCredit);
                db.AddInParameter(cmd, "@TxnTypeView", DbType.StringFixedLength, transactionType.TxnTypeView);
                db.AddInParameter(cmd, "@CommissionType", DbType.StringFixedLength, transactionType.CommissionType);
                db.AddInParameter(cmd, "@FlatRate", DbType.Currency, transactionType.FlatRate);
                db.AddInParameter(cmd, "@PercentageRate", DbType.Double, transactionType.PercentageRate);
                db.AddInParameter(cmd, "@DialogFlag", DbType.StringFixedLength, transactionType.DialogFlag);
                db.AddInParameter(cmd, "@UseDefaultAmount", DbType.Boolean, transactionType.UseDefaultAmount);
                db.AddInParameter(cmd, "@DefaultAmount", DbType.Currency, transactionType.DefaultAmount);
                db.AddInParameter(cmd, "@UseDefaultCreditAccount", DbType.Boolean, transactionType.UseDefaultCreditAccount);
                db.AddInParameter(cmd, "@DefaultCreditAccount", DbType.Int32, transactionType.DefaultCreditAccount);
                db.AddInParameter(cmd, "@UseDefaultDebitAccount", DbType.Boolean, transactionType.UseDefaultDebitAccount);
                db.AddInParameter(cmd, "@DefaultDebitAccount", DbType.Int32, transactionType.DefaultDebitAccount);
                db.AddInParameter(cmd, "@UseDefaultCreditNarrative", DbType.Boolean, transactionType.UseDefaultCreditNarrative);
                db.AddInParameter(cmd, "@DefaultCreditNarrative", DbType.String, transactionType.DefaultCreditNarrative);
                db.AddInParameter(cmd, "@UseDefaultDebitNarrative", DbType.Boolean, transactionType.UseDefaultDebitNarrative);
                db.AddInParameter(cmd, "@DefaultDebitNarrative", DbType.String, transactionType.DefaultDebitNarrative);
                db.AddInParameter(cmd, "@ScreenViewCreditAccountField", DbType.StringFixedLength, transactionType.ScreenViewCreditAccountField);
                db.AddInParameter(cmd, "@ScreenViewCreditNarrativeField", DbType.StringFixedLength, transactionType.ScreenViewCreditNarrativeField);
                db.AddInParameter(cmd, "@ScreenViewDebitAccountField", DbType.StringFixedLength, transactionType.ScreenViewDebitAccountField);
                db.AddInParameter(cmd, "@ScreenViewDebitNarrativeField", DbType.StringFixedLength, transactionType.ScreenViewDebitNarrativeField);
                db.AddInParameter(cmd, "@ScreenViewAmountField", DbType.StringFixedLength, transactionType.ScreenViewAmountField);
                db.AddInParameter(cmd, "@ScreenViewModeofPaymentField", DbType.StringFixedLength, transactionType.ScreenViewModeofPaymentField);
                db.AddInParameter(cmd, "@ScreenViewValueDateField", DbType.StringFixedLength, transactionType.ScreenViewValueDateField);
                db.AddInParameter(cmd, "@PrintReceipt", DbType.Boolean, transactionType.PrintReceipt);
                db.AddInParameter(cmd, "@ReceiptLayout", DbType.String, transactionType.ReceiptLayout);
                db.AddInParameter(cmd, "@PrintReceiptPrompt", DbType.Boolean, transactionType.PrintReceiptPrompt);
                db.AddInParameter(cmd, "@ForcePost", DbType.StringFixedLength, transactionType.ForcePost);
                db.AddInParameter(cmd, "@NarrativeFlag", DbType.StringFixedLength, transactionType.NarrativeFlag);
                db.AddInParameter(cmd, "@StatementFlag", DbType.StringFixedLength, transactionType.StatementFlag);
                db.AddInParameter(cmd, "@ValueDays", DbType.Int32, transactionType.ValueDays);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, transactionType.Status);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, transactionType.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, transactionType.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TransactionTypes table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TransactionTypes " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TransactionTypes table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A TransactionType object with data populated from the database.</returns>
        public TransactionType SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [ShortCode], [Description], [DebitCredit], [TxnTypeView], [CommissionType]" +
                        ", [FlatRate], [PercentageRate], [DialogFlag], [UseDefaultAmount], [DefaultAmount]" +
                        ", [UseDefaultCreditAccount], [DefaultCreditAccount], [UseDefaultDebitAccount], [DefaultDebitAccount]" +
                        ", [UseDefaultCreditNarrative], [DefaultCreditNarrative], [UseDefaultDebitNarrative]" +
                        ", [DefaultDebitNarrative], [ScreenViewCreditAccountField], [ScreenViewCreditNarrativeField]" +
                        ", [ScreenViewDebitAccountField], [ScreenViewDebitNarrativeField], [ScreenViewAmountField]" +
                        ", [ScreenViewModeofPaymentField], [ScreenViewValueDateField], [PrintReceipt], [ReceiptLayout]" +
                        ", [PrintReceiptPrompt], [ForcePost], [NarrativeFlag], [StatementFlag], [ValueDays]" +
                        ", [Status], [IsDeleted] " +
                "FROM dbo.TransactionTypes  " +
                "WHERE [Id]=@Id ";

            TransactionType transactionType = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TransactionType
                        transactionType = new TransactionType();

                        // Read values.
                        transactionType.Id = base.GetDataValue<int>(dr, "Id");
                        transactionType.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        transactionType.Description = base.GetDataValue<string>(dr, "Description");
                        transactionType.DebitCredit = Convert.ToChar(base.GetDataValue<string>(dr, "DebitCredit"));
                        transactionType.TxnTypeView = Convert.ToChar(base.GetDataValue<string>(dr, "TxnTypeView"));
                        transactionType.CommissionType = Convert.ToChar(base.GetDataValue<string>(dr, "CommissionType"));
                        transactionType.FlatRate = base.GetDataValue<decimal>(dr, "FlatRate");
                        transactionType.PercentageRate = base.GetDataValue<double>(dr, "PercentageRate");
                        transactionType.DialogFlag = Convert.ToChar(base.GetDataValue<string>(dr, "DialogFlag"));
                        transactionType.UseDefaultAmount = base.GetDataValue<bool>(dr, "UseDefaultAmount");
                        transactionType.DefaultAmount = base.GetDataValue<decimal>(dr, "DefaultAmount");
                        transactionType.UseDefaultCreditAccount = base.GetDataValue<bool>(dr, "UseDefaultCreditAccount");
                        transactionType.DefaultCreditAccount = base.GetDataValue<int>(dr, "DefaultCreditAccount");
                        transactionType.UseDefaultDebitAccount = base.GetDataValue<bool>(dr, "UseDefaultDebitAccount");
                        transactionType.DefaultDebitAccount = base.GetDataValue<int>(dr, "DefaultDebitAccount");
                        transactionType.UseDefaultCreditNarrative = base.GetDataValue<bool>(dr, "UseDefaultCreditNarrative");
                        transactionType.DefaultCreditNarrative = base.GetDataValue<string>(dr, "DefaultCreditNarrative");
                        transactionType.UseDefaultDebitNarrative = base.GetDataValue<bool>(dr, "UseDefaultDebitNarrative");
                        transactionType.DefaultDebitNarrative = base.GetDataValue<string>(dr, "DefaultDebitNarrative");
                        transactionType.ScreenViewCreditAccountField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewCreditAccountField"));
                        transactionType.ScreenViewCreditNarrativeField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewCreditNarrativeField"));
                        transactionType.ScreenViewDebitAccountField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewDebitAccountField"));
                        transactionType.ScreenViewDebitNarrativeField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewDebitNarrativeField"));
                        transactionType.ScreenViewAmountField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewAmountField"));
                        transactionType.ScreenViewModeofPaymentField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewModeofPaymentField"));
                        transactionType.ScreenViewValueDateField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewValueDateField"));
                        transactionType.PrintReceipt = base.GetDataValue<bool>(dr, "PrintReceipt");
                        transactionType.ReceiptLayout = base.GetDataValue<string>(dr, "ReceiptLayout");
                        transactionType.PrintReceiptPrompt = base.GetDataValue<bool>(dr, "PrintReceiptPrompt");
                        transactionType.ForcePost = Convert.ToChar(base.GetDataValue<string>(dr, "ForcePost"));
                        transactionType.NarrativeFlag = Convert.ToChar(base.GetDataValue<string>(dr, "NarrativeFlag"));
                        transactionType.StatementFlag = Convert.ToChar(base.GetDataValue<string>(dr, "StatementFlag"));
                        transactionType.ValueDays = base.GetDataValue<int>(dr, "ValueDays");
                        transactionType.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        transactionType.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return transactionType;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TransactionTypes table.
        /// </summary>
        /// <returns>A collection of TransactionType objects.</returns>		
        public List<TransactionType> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [ShortCode], [Description], [DebitCredit], [TxnTypeView], [CommissionType]" +
                        ", [FlatRate], [PercentageRate], [DialogFlag], [UseDefaultAmount], [DefaultAmount]" +
                        ", [UseDefaultCreditAccount], [DefaultCreditAccount], [UseDefaultDebitAccount], [DefaultDebitAccount]" +
                        ", [UseDefaultCreditNarrative], [DefaultCreditNarrative], [UseDefaultDebitNarrative]" +
                        ", [DefaultDebitNarrative], [ScreenViewCreditAccountField], [ScreenViewCreditNarrativeField]" +
                        ", [ScreenViewDebitAccountField], [ScreenViewDebitNarrativeField], [ScreenViewAmountField]" +
                        ", [ScreenViewModeofPaymentField], [ScreenViewValueDateField], [PrintReceipt], [ReceiptLayout]" +
                        ", [PrintReceiptPrompt], [ForcePost], [NarrativeFlag], [StatementFlag], [ValueDays]" +
                        ", [Status], [IsDeleted] " +
                "FROM dbo.TransactionTypes ";

            List<TransactionType> result = new List<TransactionType>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TransactionType
                        TransactionType transactionType = new TransactionType();

                        // Read values.
                        transactionType.Id = base.GetDataValue<int>(dr, "Id");
                        transactionType.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        transactionType.Description = base.GetDataValue<string>(dr, "Description");
                        transactionType.DebitCredit = Convert.ToChar(base.GetDataValue<string>(dr, "DebitCredit"));
                        transactionType.TxnTypeView = Convert.ToChar(base.GetDataValue<string>(dr, "TxnTypeView"));
                        transactionType.CommissionType = Convert.ToChar(base.GetDataValue<string>(dr, "CommissionType"));
                        transactionType.FlatRate = base.GetDataValue<decimal>(dr, "FlatRate");
                        transactionType.PercentageRate = base.GetDataValue<double>(dr, "PercentageRate");
                        transactionType.DialogFlag = Convert.ToChar(base.GetDataValue<string>(dr, "DialogFlag"));
                        transactionType.UseDefaultAmount = base.GetDataValue<bool>(dr, "UseDefaultAmount");
                        transactionType.DefaultAmount = base.GetDataValue<decimal>(dr, "DefaultAmount");
                        transactionType.UseDefaultCreditAccount = base.GetDataValue<bool>(dr, "UseDefaultCreditAccount");
                        transactionType.DefaultCreditAccount = base.GetDataValue<int>(dr, "DefaultCreditAccount");
                        transactionType.UseDefaultDebitAccount = base.GetDataValue<bool>(dr, "UseDefaultDebitAccount");
                        transactionType.DefaultDebitAccount = base.GetDataValue<int>(dr, "DefaultDebitAccount");
                        transactionType.UseDefaultCreditNarrative = base.GetDataValue<bool>(dr, "UseDefaultCreditNarrative");
                        transactionType.DefaultCreditNarrative = base.GetDataValue<string>(dr, "DefaultCreditNarrative");
                        transactionType.UseDefaultDebitNarrative = base.GetDataValue<bool>(dr, "UseDefaultDebitNarrative");
                        transactionType.DefaultDebitNarrative = base.GetDataValue<string>(dr, "DefaultDebitNarrative");
                        transactionType.ScreenViewCreditAccountField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewCreditAccountField"));
                        transactionType.ScreenViewCreditNarrativeField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewCreditNarrativeField"));
                        transactionType.ScreenViewDebitAccountField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewDebitAccountField"));
                        transactionType.ScreenViewDebitNarrativeField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewDebitNarrativeField"));
                        transactionType.ScreenViewAmountField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewAmountField"));
                        transactionType.ScreenViewModeofPaymentField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewModeofPaymentField"));
                        transactionType.ScreenViewValueDateField = Convert.ToChar(base.GetDataValue<string>(dr, "ScreenViewValueDateField"));
                        transactionType.PrintReceipt = base.GetDataValue<bool>(dr, "PrintReceipt");
                        transactionType.ReceiptLayout = base.GetDataValue<string>(dr, "ReceiptLayout");
                        transactionType.PrintReceiptPrompt = base.GetDataValue<bool>(dr, "PrintReceiptPrompt");
                        transactionType.ForcePost = Convert.ToChar(base.GetDataValue<string>(dr, "ForcePost"));
                        transactionType.NarrativeFlag = Convert.ToChar(base.GetDataValue<string>(dr, "NarrativeFlag"));
                        transactionType.StatementFlag = Convert.ToChar(base.GetDataValue<string>(dr, "StatementFlag"));
                        transactionType.ValueDays = base.GetDataValue<int>(dr, "ValueDays");
                        transactionType.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        transactionType.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(transactionType);
                    }
                }
            }

            return result;
        }
    }
}

