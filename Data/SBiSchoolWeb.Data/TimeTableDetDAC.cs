//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// TimeTableDets data access component. Manages CRUD operations for the TimeTableDets table.
    /// </summary>
    public partial class TimeTableDetDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TimeTableDets table.
        /// </summary>
        /// <param name="timeTableDet">A TimeTableDet object.</param>
        /// <returns>An updated TimeTableDet object.</returns>
        public TimeTableDet Create(TimeTableDet timeTableDet)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TimeTableDets ([TimeTableId], [SubjectShortCode], [RoomId], [Recurrent], [Activity], [Venue], [Text], [StartTime], [EndTime], [A], [R], [G], [B], [IsDeleted]) " +
                "VALUES(@TimeTableId, @SubjectShortCode, @RoomId, @Recurrent, @Activity, @Venue, @Text, @StartTime, @EndTime, @A, @R, @G, @B, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TimeTableId", DbType.Int32, timeTableDet.TimeTableId);
                db.AddInParameter(cmd, "@SubjectShortCode", DbType.String, timeTableDet.SubjectShortCode);
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, timeTableDet.RoomId);
                db.AddInParameter(cmd, "@Recurrent", DbType.StringFixedLength, timeTableDet.Recurrent);
                db.AddInParameter(cmd, "@Activity", DbType.String, timeTableDet.Activity);
                db.AddInParameter(cmd, "@Venue", DbType.String, timeTableDet.Venue);
                db.AddInParameter(cmd, "@Text", DbType.String, timeTableDet.Text);
                db.AddInParameter(cmd, "@StartTime", DbType.DateTime, timeTableDet.StartTime);
                db.AddInParameter(cmd, "@EndTime", DbType.DateTime, timeTableDet.EndTime);
                db.AddInParameter(cmd, "@A", DbType.Int32, timeTableDet.A);
                db.AddInParameter(cmd, "@R", DbType.Int32, timeTableDet.R);
                db.AddInParameter(cmd, "@G", DbType.Int32, timeTableDet.G);
                db.AddInParameter(cmd, "@B", DbType.Int32, timeTableDet.B);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, timeTableDet.IsDeleted);

                // Get the primary key value.
                timeTableDet.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return timeTableDet;
        }

        /// <summary>
        /// Updates an existing row in the TimeTableDets table.
        /// </summary>
        /// <param name="timeTableDet">A TimeTableDet entity object.</param>
        public void UpdateById(TimeTableDet timeTableDet)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TimeTableDets " +
                "SET " +
                    "[TimeTableId]=@TimeTableId, " +
                    "[SubjectShortCode]=@SubjectShortCode, " +
                    "[RoomId]=@RoomId, " +
                    "[Recurrent]=@Recurrent, " +
                    "[Activity]=@Activity, " +
                    "[Venue]=@Venue, " +
                    "[Text]=@Text, " +
                    "[StartTime]=@StartTime, " +
                    "[EndTime]=@EndTime, " +
                    "[A]=@A, " +
                    "[R]=@R, " +
                    "[G]=@G, " +
                    "[B]=@B, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TimeTableId", DbType.Int32, timeTableDet.TimeTableId);
                db.AddInParameter(cmd, "@SubjectShortCode", DbType.String, timeTableDet.SubjectShortCode);
                db.AddInParameter(cmd, "@RoomId", DbType.Int32, timeTableDet.RoomId);
                db.AddInParameter(cmd, "@Recurrent", DbType.StringFixedLength, timeTableDet.Recurrent);
                db.AddInParameter(cmd, "@Activity", DbType.String, timeTableDet.Activity);
                db.AddInParameter(cmd, "@Venue", DbType.String, timeTableDet.Venue);
                db.AddInParameter(cmd, "@Text", DbType.String, timeTableDet.Text);
                db.AddInParameter(cmd, "@StartTime", DbType.DateTime, timeTableDet.StartTime);
                db.AddInParameter(cmd, "@EndTime", DbType.DateTime, timeTableDet.EndTime);
                db.AddInParameter(cmd, "@A", DbType.Int32, timeTableDet.A);
                db.AddInParameter(cmd, "@R", DbType.Int32, timeTableDet.R);
                db.AddInParameter(cmd, "@G", DbType.Int32, timeTableDet.G);
                db.AddInParameter(cmd, "@B", DbType.Int32, timeTableDet.B);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, timeTableDet.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, timeTableDet.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TimeTableDets table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.TimeTableDets " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TimeTableDets table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A TimeTableDet object with data populated from the database.</returns>
        public TimeTableDet SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [TimeTableId], [SubjectShortCode], [RoomId], [Recurrent], [Activity], [Venue]" +
                        ", [Text], [StartTime], [EndTime], [A], [R], [G], [B], [IsDeleted] " +
                "FROM dbo.TimeTableDets  " +
                "WHERE [Id]=@Id ";

            TimeTableDet timeTableDet = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TimeTableDet
                        timeTableDet = new TimeTableDet();

                        // Read values.
                        timeTableDet.Id = base.GetDataValue<int>(dr, "Id");
                        timeTableDet.TimeTableId = base.GetDataValue<int>(dr, "TimeTableId");
                        timeTableDet.SubjectShortCode = base.GetDataValue<string>(dr, "SubjectShortCode");
                        timeTableDet.RoomId = base.GetDataValue<int>(dr, "RoomId");
                        timeTableDet.Recurrent = Convert.ToChar(base.GetDataValue<string>(dr, "Recurrent"));
                        timeTableDet.Activity = base.GetDataValue<string>(dr, "Activity");
                        timeTableDet.Venue = base.GetDataValue<string>(dr, "Venue");
                        timeTableDet.Text = base.GetDataValue<string>(dr, "Text");
                        timeTableDet.StartTime = base.GetDataValue<DateTime>(dr, "StartTime");
                        timeTableDet.EndTime = base.GetDataValue<DateTime>(dr, "EndTime");
                        timeTableDet.A = base.GetDataValue<int>(dr, "A");
                        timeTableDet.R = base.GetDataValue<int>(dr, "R");
                        timeTableDet.G = base.GetDataValue<int>(dr, "G");
                        timeTableDet.B = base.GetDataValue<int>(dr, "B");
                        timeTableDet.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return timeTableDet;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TimeTableDets table.
        /// </summary>
        /// <returns>A collection of TimeTableDet objects.</returns>		
        public List<TimeTableDet> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [TimeTableId], [SubjectShortCode], [RoomId], [Recurrent], [Activity], [Venue]" +
                        ", [Text], [StartTime], [EndTime], [A], [R], [G], [B], [IsDeleted] " +
                "FROM dbo.TimeTableDets ";

            List<TimeTableDet> result = new List<TimeTableDet>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TimeTableDet
                        TimeTableDet timeTableDet = new TimeTableDet();

                        // Read values.
                        timeTableDet.Id = base.GetDataValue<int>(dr, "Id");
                        timeTableDet.TimeTableId = base.GetDataValue<int>(dr, "TimeTableId");
                        timeTableDet.SubjectShortCode = base.GetDataValue<string>(dr, "SubjectShortCode");
                        timeTableDet.RoomId = base.GetDataValue<int>(dr, "RoomId");
                        timeTableDet.Recurrent = Convert.ToChar(base.GetDataValue<string>(dr, "Recurrent"));
                        timeTableDet.Activity = base.GetDataValue<string>(dr, "Activity");
                        timeTableDet.Venue = base.GetDataValue<string>(dr, "Venue");
                        timeTableDet.Text = base.GetDataValue<string>(dr, "Text");
                        timeTableDet.StartTime = base.GetDataValue<DateTime>(dr, "StartTime");
                        timeTableDet.EndTime = base.GetDataValue<DateTime>(dr, "EndTime");
                        timeTableDet.A = base.GetDataValue<int>(dr, "A");
                        timeTableDet.R = base.GetDataValue<int>(dr, "R");
                        timeTableDet.G = base.GetDataValue<int>(dr, "G");
                        timeTableDet.B = base.GetDataValue<int>(dr, "B");
                        timeTableDet.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(timeTableDet);
                    }
                }
            }

            return result;
        }
    }
}

