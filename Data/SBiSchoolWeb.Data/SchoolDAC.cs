//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/14/2015 19:04:06 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Schools data access component. Manages CRUD operations for the Schools table.
    /// </summary>
    public partial class SchoolDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Schools table.
        /// </summary>
        /// <param name="school">A School object.</param>
        /// <returns>An updated School object.</returns>
        public School Create(School school)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Schools ([SchoolIndex], [SchoolName], [SchoolType], [GradingSystem], [DefaultSchool], [GLCustomerId], [Cellphone], [Telephone], [Email], [Address1], [Address2], [SMTPServer], [SMSGateway], [Status], [Logo], [Slogan], [IsDeleted]) " +
                "VALUES(@SchoolIndex, @SchoolName, @SchoolType, @GradingSystem, @DefaultSchool, @GLCustomerId, @Cellphone, @Telephone, @Email, @Address1, @Address2, @SMTPServer, @SMSGateway, @Status, @Logo, @Slogan, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SchoolIndex", DbType.String, school.SchoolIndex);
                db.AddInParameter(cmd, "@SchoolName", DbType.String, school.SchoolName);
                db.AddInParameter(cmd, "@SchoolType", DbType.String, school.SchoolType);
                db.AddInParameter(cmd, "@GradingSystem", DbType.Int32, school.GradingSystem);
                db.AddInParameter(cmd, "@DefaultSchool", DbType.Boolean, school.DefaultSchool);
                db.AddInParameter(cmd, "@GLCustomerId", DbType.Int32, school.GLCustomerId);
                db.AddInParameter(cmd, "@Cellphone", DbType.String, school.Cellphone);
                db.AddInParameter(cmd, "@Telephone", DbType.String, school.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, school.Email);
                db.AddInParameter(cmd, "@Address1", DbType.String, school.Address1);
                db.AddInParameter(cmd, "@Address2", DbType.String, school.Address2);
                db.AddInParameter(cmd, "@SMTPServer", DbType.String, school.SMTPServer);
                db.AddInParameter(cmd, "@SMSGateway", DbType.String, school.SMSGateway);
                db.AddInParameter(cmd, "@Status", DbType.String, school.Status);
                db.AddInParameter(cmd, "@Logo", DbType.String, school.Logo);
                db.AddInParameter(cmd, "@Slogan", DbType.String, school.Slogan);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, school.IsDeleted);

                // Get the primary key value.
                school.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return school;
        }

        /// <summary>
        /// Updates an existing row in the Schools table.
        /// </summary>
        /// <param name="school">A School entity object.</param>
        public void UpdateById(School school)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Schools " +
                "SET " +
                    "[SchoolIndex]=@SchoolIndex, " +
                    "[SchoolName]=@SchoolName, " +
                    "[SchoolType]=@SchoolType, " +
                    "[GradingSystem]=@GradingSystem, " +
                    "[DefaultSchool]=@DefaultSchool, " +
                    "[GLCustomerId]=@GLCustomerId, " +
                    "[Cellphone]=@Cellphone, " +
                    "[Telephone]=@Telephone, " +
                    "[Email]=@Email, " +
                    "[Address1]=@Address1, " +
                    "[Address2]=@Address2, " +
                    "[SMTPServer]=@SMTPServer, " +
                    "[SMSGateway]=@SMSGateway, " +
                    "[Status]=@Status, " +
                    "[Logo]=@Logo, " +
                    "[Slogan]=@Slogan, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SchoolIndex", DbType.String, school.SchoolIndex);
                db.AddInParameter(cmd, "@SchoolName", DbType.String, school.SchoolName);
                db.AddInParameter(cmd, "@SchoolType", DbType.String, school.SchoolType);
                db.AddInParameter(cmd, "@GradingSystem", DbType.Int32, school.GradingSystem);
                db.AddInParameter(cmd, "@DefaultSchool", DbType.Boolean, school.DefaultSchool);
                db.AddInParameter(cmd, "@GLCustomerId", DbType.Int32, school.GLCustomerId);
                db.AddInParameter(cmd, "@Cellphone", DbType.String, school.Cellphone);
                db.AddInParameter(cmd, "@Telephone", DbType.String, school.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, school.Email);
                db.AddInParameter(cmd, "@Address1", DbType.String, school.Address1);
                db.AddInParameter(cmd, "@Address2", DbType.String, school.Address2);
                db.AddInParameter(cmd, "@SMTPServer", DbType.String, school.SMTPServer);
                db.AddInParameter(cmd, "@SMSGateway", DbType.String, school.SMSGateway);
                db.AddInParameter(cmd, "@Status", DbType.String, school.Status);
                db.AddInParameter(cmd, "@Logo", DbType.String, school.Logo);
                db.AddInParameter(cmd, "@Slogan", DbType.String, school.Slogan);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, school.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, school.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Schools table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Schools " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Schools table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A School object with data populated from the database.</returns>
        public School SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [SchoolIndex], [SchoolName], [SchoolType], [GradingSystem], [DefaultSchool]" +
                        ", [GLCustomerId], [Cellphone], [Telephone], [Email], [Address1], [Address2], [SMTPServer]" +
                        ", [SMSGateway], [Status], [Logo], [Slogan], [IsDeleted] " +
                "FROM dbo.Schools  " +
                "WHERE [Id]=@Id ";

            School school = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new School
                        school = new School();

                        // Read values.
                        school.Id = base.GetDataValue<int>(dr, "Id");
                        school.SchoolIndex = base.GetDataValue<string>(dr, "SchoolIndex");
                        school.SchoolName = base.GetDataValue<string>(dr, "SchoolName");
                        school.SchoolType = base.GetDataValue<string>(dr, "SchoolType");
                        school.GradingSystem = base.GetDataValue<int>(dr, "GradingSystem");
                        school.DefaultSchool = base.GetDataValue<bool>(dr, "DefaultSchool");
                        school.GLCustomerId = base.GetDataValue<int>(dr, "GLCustomerId");
                        school.Cellphone = base.GetDataValue<string>(dr, "Cellphone");
                        school.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        school.Email = base.GetDataValue<string>(dr, "Email");
                        school.Address1 = base.GetDataValue<string>(dr, "Address1");
                        school.Address2 = base.GetDataValue<string>(dr, "Address2");
                        school.SMTPServer = base.GetDataValue<string>(dr, "SMTPServer");
                        school.SMSGateway = base.GetDataValue<string>(dr, "SMSGateway");
                        school.Status = base.GetDataValue<string>(dr, "Status");
                        school.Logo = base.GetDataValue<string>(dr, "Logo");
                        school.Slogan = base.GetDataValue<string>(dr, "Slogan");
                        school.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return school;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Schools table.
        /// </summary>
        /// <returns>A collection of School objects.</returns>		
        public List<School> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [SchoolIndex], [SchoolName], [SchoolType], [GradingSystem], [DefaultSchool]" +
                        ", [GLCustomerId], [Cellphone], [Telephone], [Email], [Address1], [Address2], [SMTPServer]" +
                        ", [SMSGateway], [Status], [Logo], [Slogan], [IsDeleted] " +
                "FROM dbo.Schools ";

            List<School> result = new List<School>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new School
                        School school = new School();

                        // Read values.
                        school.Id = base.GetDataValue<int>(dr, "Id");
                        school.SchoolIndex = base.GetDataValue<string>(dr, "SchoolIndex");
                        school.SchoolName = base.GetDataValue<string>(dr, "SchoolName");
                        school.SchoolType = base.GetDataValue<string>(dr, "SchoolType");
                        school.GradingSystem = base.GetDataValue<int>(dr, "GradingSystem");
                        school.DefaultSchool = base.GetDataValue<bool>(dr, "DefaultSchool");
                        school.GLCustomerId = base.GetDataValue<int>(dr, "GLCustomerId");
                        school.Cellphone = base.GetDataValue<string>(dr, "Cellphone");
                        school.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        school.Email = base.GetDataValue<string>(dr, "Email");
                        school.Address1 = base.GetDataValue<string>(dr, "Address1");
                        school.Address2 = base.GetDataValue<string>(dr, "Address2");
                        school.SMTPServer = base.GetDataValue<string>(dr, "SMTPServer");
                        school.SMSGateway = base.GetDataValue<string>(dr, "SMSGateway");
                        school.Status = base.GetDataValue<string>(dr, "Status");
                        school.Logo = base.GetDataValue<string>(dr, "Logo");
                        school.Slogan = base.GetDataValue<string>(dr, "Slogan");
                        school.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(school);
                    }
                }
            }

            return result;
        }
    }
}

