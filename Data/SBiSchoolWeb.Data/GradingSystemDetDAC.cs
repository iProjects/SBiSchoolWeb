//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// GradingSystemDets data access component. Manages CRUD operations for the GradingSystemDets table.
    /// </summary>
    public partial class GradingSystemDetDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the GradingSystemDets table.
        /// </summary>
        /// <param name="gradingSystemDet">A GradingSystemDet object.</param>
        /// <returns>An updated GradingSystemDet object.</returns>
        public GradingSystemDet Create(GradingSystemDet gradingSystemDet)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.GradingSystemDets ([GradingSystemId], [LMark], [UMark], [Grade], [Point], [Remarks], [IsDeleted]) " +
                "VALUES(@GradingSystemId, @LMark, @UMark, @Grade, @Point, @Remarks, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GradingSystemId", DbType.Int32, gradingSystemDet.GradingSystemId);
                db.AddInParameter(cmd, "@LMark", DbType.Double, gradingSystemDet.LMark);
                db.AddInParameter(cmd, "@UMark", DbType.Double, gradingSystemDet.UMark);
                db.AddInParameter(cmd, "@Grade", DbType.StringFixedLength, gradingSystemDet.Grade);
                db.AddInParameter(cmd, "@Point", DbType.Double, gradingSystemDet.Point);
                db.AddInParameter(cmd, "@Remarks", DbType.String, gradingSystemDet.Remarks);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, gradingSystemDet.IsDeleted);

                // Get the primary key value.
                gradingSystemDet.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return gradingSystemDet;
        }

        /// <summary>
        /// Updates an existing row in the GradingSystemDets table.
        /// </summary>
        /// <param name="gradingSystemDet">A GradingSystemDet entity object.</param>
        public void UpdateById(GradingSystemDet gradingSystemDet)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.GradingSystemDets " +
                "SET " +
                    "[GradingSystemId]=@GradingSystemId, " +
                    "[LMark]=@LMark, " +
                    "[UMark]=@UMark, " +
                    "[Grade]=@Grade, " +
                    "[Point]=@Point, " +
                    "[Remarks]=@Remarks, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GradingSystemId", DbType.Int32, gradingSystemDet.GradingSystemId);
                db.AddInParameter(cmd, "@LMark", DbType.Double, gradingSystemDet.LMark);
                db.AddInParameter(cmd, "@UMark", DbType.Double, gradingSystemDet.UMark);
                db.AddInParameter(cmd, "@Grade", DbType.StringFixedLength, gradingSystemDet.Grade);
                db.AddInParameter(cmd, "@Point", DbType.Double, gradingSystemDet.Point);
                db.AddInParameter(cmd, "@Remarks", DbType.String, gradingSystemDet.Remarks);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, gradingSystemDet.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, gradingSystemDet.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the GradingSystemDets table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.GradingSystemDets " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the GradingSystemDets table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A GradingSystemDet object with data populated from the database.</returns>
        public GradingSystemDet SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [GradingSystemId], [LMark], [UMark], [Grade], [Point], [Remarks], [IsDeleted]" +
                        " " +
                "FROM dbo.GradingSystemDets  " +
                "WHERE [Id]=@Id ";

            GradingSystemDet gradingSystemDet = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new GradingSystemDet
                        gradingSystemDet = new GradingSystemDet();

                        // Read values.
                        gradingSystemDet.Id = base.GetDataValue<int>(dr, "Id");
                        gradingSystemDet.GradingSystemId = base.GetDataValue<int>(dr, "GradingSystemId");
                        gradingSystemDet.LMark = base.GetDataValue<double>(dr, "LMark");
                        gradingSystemDet.UMark = base.GetDataValue<double>(dr, "UMark");
                        gradingSystemDet.Grade = base.GetDataValue<string>(dr, "Grade");
                        gradingSystemDet.Point = base.GetDataValue<double>(dr, "Point");
                        gradingSystemDet.Remarks = base.GetDataValue<string>(dr, "Remarks");
                        gradingSystemDet.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return gradingSystemDet;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the GradingSystemDets table.
        /// </summary>
        /// <returns>A collection of GradingSystemDet objects.</returns>		
        public List<GradingSystemDet> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [GradingSystemId], [LMark], [UMark], [Grade], [Point], [Remarks], [IsDeleted]" +
                        " " +
                "FROM dbo.GradingSystemDets ";

            List<GradingSystemDet> result = new List<GradingSystemDet>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new GradingSystemDet
                        GradingSystemDet gradingSystemDet = new GradingSystemDet();

                        // Read values.
                        gradingSystemDet.Id = base.GetDataValue<int>(dr, "Id");
                        gradingSystemDet.GradingSystemId = base.GetDataValue<int>(dr, "GradingSystemId");
                        gradingSystemDet.LMark = base.GetDataValue<double>(dr, "LMark");
                        gradingSystemDet.UMark = base.GetDataValue<double>(dr, "UMark");
                        gradingSystemDet.Grade = base.GetDataValue<string>(dr, "Grade");
                        gradingSystemDet.Point = base.GetDataValue<double>(dr, "Point");
                        gradingSystemDet.Remarks = base.GetDataValue<string>(dr, "Remarks");
                        gradingSystemDet.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(gradingSystemDet);
                    }
                }
            }

            return result;
        }
    }
}

