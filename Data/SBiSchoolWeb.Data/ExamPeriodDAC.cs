//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// ExamPeriod data access component. Manages CRUD operations for the ExamPeriod table.
    /// </summary>
    public partial class ExamPeriodDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the ExamPeriod table.
        /// </summary>
        /// <param name="examPeriod">A ExamPeriod object.</param>
        /// <returns>An updated ExamPeriod object.</returns>
        public ExamPeriod Create(ExamPeriod examPeriod)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ExamPeriod ([Year], [Term], [Description], [Status], [StartDate], [EndDate], [IsDeleted]) " +
                "VALUES(@Year, @Term, @Description, @Status, @StartDate, @EndDate, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Year", DbType.Int32, examPeriod.Year);
                db.AddInParameter(cmd, "@Term", DbType.Int32, examPeriod.Term);
                db.AddInParameter(cmd, "@Description", DbType.String, examPeriod.Description);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, examPeriod.Status);
                db.AddInParameter(cmd, "@StartDate", DbType.DateTime, examPeriod.StartDate);
                db.AddInParameter(cmd, "@EndDate", DbType.DateTime, examPeriod.EndDate);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, examPeriod.IsDeleted);

                // Get the primary key value.
                examPeriod.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return examPeriod;
        }

        /// <summary>
        /// Updates an existing row in the ExamPeriod table.
        /// </summary>
        /// <param name="examPeriod">A ExamPeriod entity object.</param>
        public void UpdateById(ExamPeriod examPeriod)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ExamPeriod " +
                "SET " +
                    "[Year]=@Year, " +
                    "[Term]=@Term, " +
                    "[Description]=@Description, " +
                    "[Status]=@Status, " +
                    "[StartDate]=@StartDate, " +
                    "[EndDate]=@EndDate, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Year", DbType.Int32, examPeriod.Year);
                db.AddInParameter(cmd, "@Term", DbType.Int32, examPeriod.Term);
                db.AddInParameter(cmd, "@Description", DbType.String, examPeriod.Description);
                db.AddInParameter(cmd, "@Status", DbType.StringFixedLength, examPeriod.Status);
                db.AddInParameter(cmd, "@StartDate", DbType.DateTime, examPeriod.StartDate);
                db.AddInParameter(cmd, "@EndDate", DbType.DateTime, examPeriod.EndDate);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, examPeriod.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, examPeriod.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the ExamPeriod table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ExamPeriod " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the ExamPeriod table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A ExamPeriod object with data populated from the database.</returns>
        public ExamPeriod SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Year], [Term], [Description], [Status], [StartDate], [EndDate], [IsDeleted]" +
                        " " +
                "FROM dbo.ExamPeriod  " +
                "WHERE [Id]=@Id ";

            ExamPeriod examPeriod = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new ExamPeriod
                        examPeriod = new ExamPeriod();

                        // Read values.
                        examPeriod.Id = base.GetDataValue<int>(dr, "Id");
                        examPeriod.Year = base.GetDataValue<int>(dr, "Year");
                        examPeriod.Term = base.GetDataValue<int>(dr, "Term");
                        examPeriod.Description = base.GetDataValue<string>(dr, "Description");
                        examPeriod.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        examPeriod.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        examPeriod.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        examPeriod.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return examPeriod;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the ExamPeriod table.
        /// </summary>
        /// <returns>A collection of ExamPeriod objects.</returns>		
        public List<ExamPeriod> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Year], [Term], [Description], [Status], [StartDate], [EndDate], [IsDeleted]" +
                        " " +
                "FROM dbo.ExamPeriod ";

            List<ExamPeriod> result = new List<ExamPeriod>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new ExamPeriod
                        ExamPeriod examPeriod = new ExamPeriod();

                        // Read values.
                        examPeriod.Id = base.GetDataValue<int>(dr, "Id");
                        examPeriod.Year = base.GetDataValue<int>(dr, "Year");
                        examPeriod.Term = base.GetDataValue<int>(dr, "Term");
                        examPeriod.Description = base.GetDataValue<string>(dr, "Description");
                        examPeriod.Status = Convert.ToChar(base.GetDataValue<string>(dr, "Status"));
                        examPeriod.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        examPeriod.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        examPeriod.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(examPeriod);
                    }
                }
            }

            return result;
        }
    }
}

