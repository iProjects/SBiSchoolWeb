//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/14/2015 19:04:06 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// Teachers data access component. Manages CRUD operations for the Teachers table.
    /// </summary>
    public partial class TeacherDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Teachers table.
        /// </summary>
        /// <param name="teacher">A Teacher object.</param>
        /// <returns>An updated Teacher object.</returns>
        public Teacher Create(Teacher teacher)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Teachers ([Name], [IDNo], [TSCNo], [Position], [Email], [Status], [DateJoined], [DateLeft], [IsLeft], [HighestQualification], [IsDeleted]) " +
                "VALUES(@Name, @IDNo, @TSCNo, @Position, @Email, @Status, @DateJoined, @DateLeft, @IsLeft, @HighestQualification, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, teacher.Name);
                db.AddInParameter(cmd, "@IDNo", DbType.String, teacher.IDNo);
                db.AddInParameter(cmd, "@TSCNo", DbType.String, teacher.TSCNo);
                db.AddInParameter(cmd, "@Position", DbType.String, teacher.Position);
                db.AddInParameter(cmd, "@Email", DbType.String, teacher.Email);
                db.AddInParameter(cmd, "@Status", DbType.String, teacher.Status);
                db.AddInParameter(cmd, "@DateJoined", DbType.DateTime, teacher.DateJoined);
                db.AddInParameter(cmd, "@DateLeft", DbType.DateTime, teacher.DateLeft);
                db.AddInParameter(cmd, "@IsLeft", DbType.Boolean, teacher.IsLeft);
                db.AddInParameter(cmd, "@HighestQualification", DbType.String, teacher.HighestQualification);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, teacher.IsDeleted);

                // Get the primary key value.
                teacher.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return teacher;
        }

        /// <summary>
        /// Updates an existing row in the Teachers table.
        /// </summary>
        /// <param name="teacher">A Teacher entity object.</param>
        public void UpdateById(Teacher teacher)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Teachers " +
                "SET " +
                    "[Name]=@Name, " +
                    "[IDNo]=@IDNo, " +
                    "[TSCNo]=@TSCNo, " +
                    "[Position]=@Position, " +
                    "[Email]=@Email, " +
                    "[Status]=@Status, " +
                    "[DateJoined]=@DateJoined, " +
                    "[DateLeft]=@DateLeft, " +
                    "[IsLeft]=@IsLeft, " +
                    "[HighestQualification]=@HighestQualification, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Name", DbType.String, teacher.Name);
                db.AddInParameter(cmd, "@IDNo", DbType.String, teacher.IDNo);
                db.AddInParameter(cmd, "@TSCNo", DbType.String, teacher.TSCNo);
                db.AddInParameter(cmd, "@Position", DbType.String, teacher.Position);
                db.AddInParameter(cmd, "@Email", DbType.String, teacher.Email);
                db.AddInParameter(cmd, "@Status", DbType.String, teacher.Status);
                db.AddInParameter(cmd, "@DateJoined", DbType.DateTime, teacher.DateJoined);
                db.AddInParameter(cmd, "@DateLeft", DbType.DateTime, teacher.DateLeft);
                db.AddInParameter(cmd, "@IsLeft", DbType.Boolean, teacher.IsLeft);
                db.AddInParameter(cmd, "@HighestQualification", DbType.String, teacher.HighestQualification);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, teacher.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, teacher.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Teachers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Teachers " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Teachers table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Teacher object with data populated from the database.</returns>
        public Teacher SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Name], [IDNo], [TSCNo], [Position], [Email], [Status], [DateJoined], [DateLeft]" +
                        ", [IsLeft], [HighestQualification], [IsDeleted] " +
                "FROM dbo.Teachers  " +
                "WHERE [Id]=@Id ";

            Teacher teacher = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Teacher
                        teacher = new Teacher();

                        // Read values.
                        teacher.Id = base.GetDataValue<int>(dr, "Id");
                        teacher.Name = base.GetDataValue<string>(dr, "Name");
                        teacher.IDNo = base.GetDataValue<string>(dr, "IDNo");
                        teacher.TSCNo = base.GetDataValue<string>(dr, "TSCNo");
                        teacher.Position = base.GetDataValue<string>(dr, "Position");
                        teacher.Email = base.GetDataValue<string>(dr, "Email");
                        teacher.Status = base.GetDataValue<string>(dr, "Status");
                        teacher.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        teacher.DateLeft = base.GetDataValue<DateTime>(dr, "DateLeft");
                        teacher.IsLeft = base.GetDataValue<bool>(dr, "IsLeft");
                        teacher.HighestQualification = base.GetDataValue<string>(dr, "HighestQualification");
                        teacher.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return teacher;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Teachers table.
        /// </summary>
        /// <returns>A collection of Teacher objects.</returns>		
        public List<Teacher> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Name], [IDNo], [TSCNo], [Position], [Email], [Status], [DateJoined], [DateLeft]" +
                        ", [IsLeft], [HighestQualification], [IsDeleted] " +
                "FROM dbo.Teachers ";

            List<Teacher> result = new List<Teacher>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Teacher
                        Teacher teacher = new Teacher();

                        // Read values.
                        teacher.Id = base.GetDataValue<int>(dr, "Id");
                        teacher.Name = base.GetDataValue<string>(dr, "Name");
                        teacher.IDNo = base.GetDataValue<string>(dr, "IDNo");
                        teacher.TSCNo = base.GetDataValue<string>(dr, "TSCNo");
                        teacher.Position = base.GetDataValue<string>(dr, "Position");
                        teacher.Email = base.GetDataValue<string>(dr, "Email");
                        teacher.Status = base.GetDataValue<string>(dr, "Status");
                        teacher.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        teacher.DateLeft = base.GetDataValue<DateTime>(dr, "DateLeft");
                        teacher.IsLeft = base.GetDataValue<bool>(dr, "IsLeft");
                        teacher.HighestQualification = base.GetDataValue<string>(dr, "HighestQualification");
                        teacher.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(teacher);
                    }
                }
            }

            return result;
        }
    }
}

