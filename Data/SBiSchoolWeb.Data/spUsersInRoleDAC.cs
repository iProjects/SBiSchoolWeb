//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 06:25:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiSchoolWeb.Entities;

namespace SBiSchoolWeb.Data
{
    /// <summary>
    /// spUsersInRoles data access component. Manages CRUD operations for the spUsersInRoles table.
    /// </summary>
    public partial class spUsersInRoleDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the spUsersInRoles table.
        /// </summary>
        /// <param name="spUsersInRole">A spUsersInRole object.</param>
        /// <returns>An updated spUsersInRole object.</returns>
        public spUsersInRole Create(spUsersInRole spUsersInRole)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.spUsersInRoles ([UserId], [RoleId]) " +
                "VALUES(@UserId, @RoleId);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@UserId", DbType.Int32, spUsersInRole.UserId);
                db.AddInParameter(cmd, "@RoleId", DbType.Int32, spUsersInRole.RoleId);

                db.ExecuteNonQuery(cmd);
            }

            return spUsersInRole;
        }

        /// <summary>
        /// Updates an existing row in the spUsersInRoles table.
        /// </summary>
        /// <param name="spUsersInRole">A spUsersInRole entity object.</param>
        public void UpdateById(spUsersInRole spUsersInRole)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.spUsersInRoles " +
                "SET " +
                "WHERE [UserId]=@UserId " +
                      "AND [RoleId]=@RoleId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@UserId", DbType.Int32, spUsersInRole.UserId);
                db.AddInParameter(cmd, "@RoleId", DbType.Int32, spUsersInRole.RoleId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the spUsersInRoles table.
        /// </summary>
        /// <param name="userId">A userId value.</param>
        public void DeleteById(int userId)
        {
            const string SQL_STATEMENT = "DELETE dbo.spUsersInRoles " +
                                         "WHERE [UserId]=@UserId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@UserId", DbType.Int32, userId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the spUsersInRoles table.
        /// </summary>
        /// <param name="userId">A userId value.</param>
        public void DeleteById(int userId, int roleId)
        {
            const string SQL_STATEMENT = "DELETE dbo.spUsersInRoles " +
                                          "WHERE [UserId]=@UserId " +
                      "AND [RoleId]=@RoleId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@UserId", DbType.Int32, userId);
                db.AddInParameter(cmd, "@RoleId", DbType.Int32, roleId);

                db.ExecuteNonQuery(cmd);
            }
        }
         
        /// <summary>
        /// Conditionally retrieves one or more rows from the spUsersInRoles table.
        /// </summary>
        /// <returns>A collection of spUsersInRole objects.</returns>		
        public List<spUsersInRole> Select(int userId)
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [UserId], [RoleId] " +
                "FROM dbo.spUsersInRoles  " +
                "WHERE [UserId]=@UserId ";

            List<spUsersInRole> result = new List<spUsersInRole>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@UserId", DbType.Int32, userId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new spUsersInRole
                        spUsersInRole spUsersInRole = new spUsersInRole();

                        // Read values.
                        spUsersInRole.UserId = base.GetDataValue<int>(dr, "UserId");
                        spUsersInRole.RoleId = base.GetDataValue<int>(dr, "RoleId");

                        // Add to List.
                        result.Add(spUsersInRole);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the spUsersInRoles table.
        /// </summary>
        /// <returns>A collection of spUsersInRole objects.</returns>		
        public List<spUsersInRole> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [UserId], [RoleId] " +
                "FROM dbo.spUsersInRoles ";

            List<spUsersInRole> result = new List<spUsersInRole>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new spUsersInRole
                        spUsersInRole spUsersInRole = new spUsersInRole();

                        // Read values.
                        spUsersInRole.UserId = base.GetDataValue<int>(dr, "UserId");
                        spUsersInRole.RoleId = base.GetDataValue<int>(dr, "RoleId");

                        // Add to List.
                        result.Add(spUsersInRole);
                    }
                }
            }

            return result;
        }


    }
}

